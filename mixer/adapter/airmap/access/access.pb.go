// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/airmap/access/access.proto

/*
	Package access is a generated protocol buffer package.

	It is generated from these files:
		mixer/adapter/airmap/access/access.proto

	It has these top-level messages:
		Status
		Validity
		Raw
		Credentials
		API
		VerifyAPIKeyParameters
		VerifyAPIKeyResult
		AuthorizeAccessParameters
		AuthorizeAccessResult
		InsertProfileParameters
		InsertProfileResult
		InsertAccessLogResult
		AccessLogEntry
		InsertAccessLogParameters
*/
package access

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Code enumerates all known result codes.
type Code int32

const (
	// Not an error; returned on success
	//
	// HTTP Mapping: 200 OK
	CodeOK Code = 0
	// The operation is forbidden.
	//
	// HTTP Mapping: 403 Forbidden
	CodeForbidden Code = 1
	// The operation is not authorized.
	//
	// HTTP Mapping: 401 Unauthorized
	CodeUnauthorized Code = 2
	// The quota for the operation has been exceeded.
	//
	// HTTP Mapping: 429 Too Many Requests
	CodeQuotaExceeded Code = 3
)

var Code_name = map[int32]string{
	0: "CodeOK",
	1: "CodeForbidden",
	2: "CodeUnauthorized",
	3: "CodeQuotaExceeded",
}
var Code_value = map[string]int32{
	"CodeOK":            0,
	"CodeForbidden":     1,
	"CodeUnauthorized":  2,
	"CodeQuotaExceeded": 3,
}

func (Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

// Status summarizes the status of an operation.
type Status struct {
	Code    Code   `protobuf:"varint,1,opt,name=code,proto3,enum=access.Code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

func (m *Status) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return CodeOK
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Validity describes limits on the validity of a result.
type Validity struct {
	Duration *google_protobuf.Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	Count    uint64                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Validity) Reset()                    { *m = Validity{} }
func (*Validity) ProtoMessage()               {}
func (*Validity) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{1} }

func (m *Validity) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Validity) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Raw bundles up raw values for post-processing in the adapter.
type Raw struct {
	Authorization *Raw_Authorization `protobuf:"bytes,1,opt,name=authorization" json:"authorization,omitempty"`
}

func (m *Raw) Reset()                    { *m = Raw{} }
func (*Raw) ProtoMessage()               {}
func (*Raw) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2} }

func (m *Raw) GetAuthorization() *Raw_Authorization {
	if m != nil {
		return m.Authorization
	}
	return nil
}

// Models a raw authorization value.
type Raw_Authorization struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *Raw_Authorization) Reset()                    { *m = Raw_Authorization{} }
func (*Raw_Authorization) ProtoMessage()               {}
func (*Raw_Authorization) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 0} }

func (m *Raw_Authorization) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Credentials bundles up types and members describing subjects.
type Credentials struct {
	Username *Credentials_Username `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Groups   []*Credentials_Group  `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	Password *Credentials_Password `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3} }

func (m *Credentials) GetUsername() *Credentials_Username {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *Credentials) GetGroups() []*Credentials_Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Credentials) GetPassword() *Credentials_Password {
	if m != nil {
		return m.Password
	}
	return nil
}

// Username models a username.
type Credentials_Username struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *Credentials_Username) Reset()                    { *m = Credentials_Username{} }
func (*Credentials_Username) ProtoMessage()               {}
func (*Credentials_Username) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3, 0} }

func (m *Credentials_Username) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Group models a group.
type Credentials_Group struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *Credentials_Group) Reset()                    { *m = Credentials_Group{} }
func (*Credentials_Group) ProtoMessage()               {}
func (*Credentials_Group) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3, 1} }

func (m *Credentials_Group) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Password models a password.
type Credentials_Password struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *Credentials_Password) Reset()                    { *m = Credentials_Password{} }
func (*Credentials_Password) ProtoMessage()               {}
func (*Credentials_Password) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3, 2} }

func (m *Credentials_Password) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// API groups up types describing API accesses.
type API struct {
}

func (m *API) Reset()                    { *m = API{} }
func (*API) ProtoMessage()               {}
func (*API) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4} }

// Namespace models the namespace that an API lives in.
type API_Namespace struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Namespace) Reset()                    { *m = API_Namespace{} }
func (*API_Namespace) ProtoMessage()               {}
func (*API_Namespace) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 0} }

func (m *API_Namespace) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Name models the name of an API.
type API_Name struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Name) Reset()                    { *m = API_Name{} }
func (*API_Name) ProtoMessage()               {}
func (*API_Name) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 1} }

func (m *API_Name) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Version models the version of an API.
type API_Version struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Version) Reset()                    { *m = API_Version{} }
func (*API_Version) ProtoMessage()               {}
func (*API_Version) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 2} }

func (m *API_Version) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Resource models a specific resource of an API.
type API_Resource struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Resource) Reset()                    { *m = API_Resource{} }
func (*API_Resource) ProtoMessage()               {}
func (*API_Resource) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 3} }

func (m *API_Resource) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Method models an access method on an API.
type API_Method struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Method) Reset()                    { *m = API_Method{} }
func (*API_Method) ProtoMessage()               {}
func (*API_Method) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 4} }

func (m *API_Method) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Key models an API key passed on with a request to an API.
type API_Key struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Key) Reset()                    { *m = API_Key{} }
func (*API_Key) ProtoMessage()               {}
func (*API_Key) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4, 5} }

func (m *API_Key) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// VerifyAPIKeyParameters bundles up parameters for calls to Controller.VerifyAPIKey.
type VerifyAPIKeyParameters struct {
	Name      *API_Name                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Version   *API_Version                `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Method    *API_Method                 `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Key       *API_Key                    `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *VerifyAPIKeyParameters) Reset()                    { *m = VerifyAPIKeyParameters{} }
func (*VerifyAPIKeyParameters) ProtoMessage()               {}
func (*VerifyAPIKeyParameters) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{5} }

func (m *VerifyAPIKeyParameters) GetName() *API_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *VerifyAPIKeyParameters) GetVersion() *API_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *VerifyAPIKeyParameters) GetMethod() *API_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *VerifyAPIKeyParameters) GetKey() *API_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *VerifyAPIKeyParameters) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// VerifyAPIKeyResult bundles up the result of calls to Controller.VerifyAPIKey.
type VerifyAPIKeyResult struct {
	Status   *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Validity *Validity `protobuf:"bytes,2,opt,name=validity" json:"validity,omitempty"`
}

func (m *VerifyAPIKeyResult) Reset()                    { *m = VerifyAPIKeyResult{} }
func (*VerifyAPIKeyResult) ProtoMessage()               {}
func (*VerifyAPIKeyResult) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{6} }

func (m *VerifyAPIKeyResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VerifyAPIKeyResult) GetValidity() *Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

// AuthorizeAccessParameters bundles up parameters for calls to Controller.AuthorizeAccess.
type AuthorizeAccessParameters struct {
	Subject   *AuthorizeAccessParameters_Subject `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Action    *AuthorizeAccessParameters_Action  `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Raw       *Raw                               `protobuf:"bytes,3,opt,name=raw" json:"raw,omitempty"`
	Timestamp *google_protobuf1.Timestamp        `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *AuthorizeAccessParameters) Reset()                    { *m = AuthorizeAccessParameters{} }
func (*AuthorizeAccessParameters) ProtoMessage()               {}
func (*AuthorizeAccessParameters) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{7} }

func (m *AuthorizeAccessParameters) GetSubject() *AuthorizeAccessParameters_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *AuthorizeAccessParameters) GetAction() *AuthorizeAccessParameters_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *AuthorizeAccessParameters) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *AuthorizeAccessParameters) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Subject describes who is trying to access an API.
type AuthorizeAccessParameters_Subject struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=credentials" json:"credentials,omitempty"`
	Key         *API_Key     `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *AuthorizeAccessParameters_Subject) Reset()      { *m = AuthorizeAccessParameters_Subject{} }
func (*AuthorizeAccessParameters_Subject) ProtoMessage() {}
func (*AuthorizeAccessParameters_Subject) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{7, 0}
}

func (m *AuthorizeAccessParameters_Subject) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *AuthorizeAccessParameters_Subject) GetKey() *API_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// Action describes what a subject is trying to access.
type AuthorizeAccessParameters_Action struct {
	Namespace *API_Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name      *API_Name      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version   *API_Version   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Method    *API_Method    `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Resource  *API_Resource  `protobuf:"bytes,5,opt,name=resource" json:"resource,omitempty"`
}

func (m *AuthorizeAccessParameters_Action) Reset()      { *m = AuthorizeAccessParameters_Action{} }
func (*AuthorizeAccessParameters_Action) ProtoMessage() {}
func (*AuthorizeAccessParameters_Action) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{7, 1}
}

func (m *AuthorizeAccessParameters_Action) GetNamespace() *API_Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetName() *API_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetVersion() *API_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetMethod() *API_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetResource() *API_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// AuthorizeAccessResult bundles up the result of calls to Controller.AuthorizeAccess.
type AuthorizeAccessResult struct {
	Status   *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Validity *Validity `protobuf:"bytes,2,opt,name=validity" json:"validity,omitempty"`
}

func (m *AuthorizeAccessResult) Reset()                    { *m = AuthorizeAccessResult{} }
func (*AuthorizeAccessResult) ProtoMessage()               {}
func (*AuthorizeAccessResult) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{8} }

func (m *AuthorizeAccessResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AuthorizeAccessResult) GetValidity() *Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

// InsertProfileParameters bundles up parameters for calls to Controller.InsertProfile
type InsertProfileParameters struct {
	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *InsertProfileParameters) Reset()                    { *m = InsertProfileParameters{} }
func (*InsertProfileParameters) ProtoMessage()               {}
func (*InsertProfileParameters) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{9} }

func (m *InsertProfileParameters) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InsertProfileParameters) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// InsertProfileResult bundles up the result of calls to Controller.InsertProfile
type InsertProfileResult struct {
}

func (m *InsertProfileResult) Reset()                    { *m = InsertProfileResult{} }
func (*InsertProfileResult) ProtoMessage()               {}
func (*InsertProfileResult) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{10} }

type InsertAccessLogResult struct {
	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *InsertAccessLogResult) Reset()                    { *m = InsertAccessLogResult{} }
func (*InsertAccessLogResult) ProtoMessage()               {}
func (*InsertAccessLogResult) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{11} }

func (m *InsertAccessLogResult) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InsertAccessLogResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AccessLogEntry struct {
}

func (m *AccessLogEntry) Reset()                    { *m = AccessLogEntry{} }
func (*AccessLogEntry) ProtoMessage()               {}
func (*AccessLogEntry) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{12} }

type AccessLogEntry_Variables struct {
	Source      *AccessLogEntry_Source      `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *AccessLogEntry_Destination `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Request     *AccessLogEntry_Request     `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	Response    *AccessLogEntry_Response    `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
	Internal    *AccessLogEntry_Internal    `protobuf:"bytes,5,opt,name=internal" json:"internal,omitempty"`
}

func (m *AccessLogEntry_Variables) Reset()      { *m = AccessLogEntry_Variables{} }
func (*AccessLogEntry_Variables) ProtoMessage() {}
func (*AccessLogEntry_Variables) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{12, 0}
}

func (m *AccessLogEntry_Variables) GetSource() *AccessLogEntry_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AccessLogEntry_Variables) GetDestination() *AccessLogEntry_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *AccessLogEntry_Variables) GetRequest() *AccessLogEntry_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AccessLogEntry_Variables) GetResponse() *AccessLogEntry_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *AccessLogEntry_Variables) GetInternal() *AccessLogEntry_Internal {
	if m != nil {
		return m.Internal
	}
	return nil
}

type AccessLogEntry_Source struct {
	Ip        []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	App       string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	Principal string `protobuf:"bytes,3,opt,name=principal,proto3" json:"principal,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Workload  string `protobuf:"bytes,5,opt,name=workload,proto3" json:"workload,omitempty"`
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Owner     string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *AccessLogEntry_Source) Reset()                    { *m = AccessLogEntry_Source{} }
func (*AccessLogEntry_Source) ProtoMessage()               {}
func (*AccessLogEntry_Source) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{12, 1} }

func (m *AccessLogEntry_Source) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *AccessLogEntry_Source) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *AccessLogEntry_Source) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

func (m *AccessLogEntry_Source) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessLogEntry_Source) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *AccessLogEntry_Source) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AccessLogEntry_Source) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AccessLogEntry_Destination struct {
	Ip          []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	App         string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	Servicehost string `protobuf:"bytes,3,opt,name=servicehost,proto3" json:"servicehost,omitempty"`
	Workload    string `protobuf:"bytes,4,opt,name=workload,proto3" json:"workload,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Owner       string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Principal   string `protobuf:"bytes,8,opt,name=principal,proto3" json:"principal,omitempty"`
}

func (m *AccessLogEntry_Destination) Reset()      { *m = AccessLogEntry_Destination{} }
func (*AccessLogEntry_Destination) ProtoMessage() {}
func (*AccessLogEntry_Destination) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{12, 2}
}

func (m *AccessLogEntry_Destination) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *AccessLogEntry_Destination) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetServicehost() string {
	if m != nil {
		return m.Servicehost
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccessLogEntry_Destination) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

type AccessLogEntry_Request struct {
	ApiClaims     string `protobuf:"bytes,1,opt,name=api_claims,json=apiClaims,proto3" json:"api_claims,omitempty"`
	ApiKey        string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Method        string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Url           string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	UrlPath       string `protobuf:"bytes,6,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty"`
	RequestSize   int64  `protobuf:"varint,7,opt,name=request_size,json=requestSize,proto3" json:"request_size,omitempty"`
	RequestId     int64  `protobuf:"varint,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ClientTraceId string `protobuf:"bytes,9,opt,name=client_trace_id,json=clientTraceId,proto3" json:"client_trace_id,omitempty"`
	UserAgent     string `protobuf:"bytes,10,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	ReceivedBytes int64  `protobuf:"varint,11,opt,name=received_bytes,json=receivedBytes,proto3" json:"received_bytes,omitempty"`
	Referer       string `protobuf:"bytes,12,opt,name=referer,proto3" json:"referer,omitempty"`
	HttpAuthority string `protobuf:"bytes,13,opt,name=http_authority,json=httpAuthority,proto3" json:"http_authority,omitempty"`
	XForwardedFor string `protobuf:"bytes,14,opt,name=x_forwarded_for,json=xForwardedFor,proto3" json:"x_forwarded_for,omitempty"`
}

func (m *AccessLogEntry_Request) Reset()                    { *m = AccessLogEntry_Request{} }
func (*AccessLogEntry_Request) ProtoMessage()               {}
func (*AccessLogEntry_Request) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{12, 3} }

func (m *AccessLogEntry_Request) GetApiClaims() string {
	if m != nil {
		return m.ApiClaims
	}
	return ""
}

func (m *AccessLogEntry_Request) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *AccessLogEntry_Request) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *AccessLogEntry_Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AccessLogEntry_Request) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AccessLogEntry_Request) GetUrlPath() string {
	if m != nil {
		return m.UrlPath
	}
	return ""
}

func (m *AccessLogEntry_Request) GetRequestSize() int64 {
	if m != nil {
		return m.RequestSize
	}
	return 0
}

func (m *AccessLogEntry_Request) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *AccessLogEntry_Request) GetClientTraceId() string {
	if m != nil {
		return m.ClientTraceId
	}
	return ""
}

func (m *AccessLogEntry_Request) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *AccessLogEntry_Request) GetReceivedBytes() int64 {
	if m != nil {
		return m.ReceivedBytes
	}
	return 0
}

func (m *AccessLogEntry_Request) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *AccessLogEntry_Request) GetHttpAuthority() string {
	if m != nil {
		return m.HttpAuthority
	}
	return ""
}

func (m *AccessLogEntry_Request) GetXForwardedFor() string {
	if m != nil {
		return m.XForwardedFor
	}
	return ""
}

type AccessLogEntry_Response struct {
	ResponseCode      int64                       `protobuf:"varint,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	ResponseSize      int64                       `protobuf:"varint,2,opt,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	Latency           *google_protobuf.Duration   `protobuf:"bytes,3,opt,name=latency" json:"latency,omitempty"`
	ResponseTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=response_timestamp,json=responseTimestamp" json:"response_timestamp,omitempty"`
	SentBytes         int64                       `protobuf:"varint,5,opt,name=sent_bytes,json=sentBytes,proto3" json:"sent_bytes,omitempty"`
	GrpcStatus        string                      `protobuf:"bytes,6,opt,name=grpcStatus,proto3" json:"grpcStatus,omitempty"`
	GrpcMessage       string                      `protobuf:"bytes,7,opt,name=grpcMessage,proto3" json:"grpcMessage,omitempty"`
}

func (m *AccessLogEntry_Response) Reset()      { *m = AccessLogEntry_Response{} }
func (*AccessLogEntry_Response) ProtoMessage() {}
func (*AccessLogEntry_Response) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{12, 4}
}

func (m *AccessLogEntry_Response) GetResponseCode() int64 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *AccessLogEntry_Response) GetResponseSize() int64 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

func (m *AccessLogEntry_Response) GetLatency() *google_protobuf.Duration {
	if m != nil {
		return m.Latency
	}
	return nil
}

func (m *AccessLogEntry_Response) GetResponseTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ResponseTimestamp
	}
	return nil
}

func (m *AccessLogEntry_Response) GetSentBytes() int64 {
	if m != nil {
		return m.SentBytes
	}
	return 0
}

func (m *AccessLogEntry_Response) GetGrpcStatus() string {
	if m != nil {
		return m.GrpcStatus
	}
	return ""
}

func (m *AccessLogEntry_Response) GetGrpcMessage() string {
	if m != nil {
		return m.GrpcMessage
	}
	return ""
}

type AccessLogEntry_Internal struct {
	ConnectionSecurityPolicy string `protobuf:"bytes,1,opt,name=connection_security_policy,json=connectionSecurityPolicy,proto3" json:"connection_security_policy,omitempty"`
	RequestedServerName      string `protobuf:"bytes,2,opt,name=requested_server_name,json=requestedServerName,proto3" json:"requested_server_name,omitempty"`
	Reporter                 string `protobuf:"bytes,3,opt,name=reporter,proto3" json:"reporter,omitempty"`
}

func (m *AccessLogEntry_Internal) Reset()      { *m = AccessLogEntry_Internal{} }
func (*AccessLogEntry_Internal) ProtoMessage() {}
func (*AccessLogEntry_Internal) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{12, 5}
}

func (m *AccessLogEntry_Internal) GetConnectionSecurityPolicy() string {
	if m != nil {
		return m.ConnectionSecurityPolicy
	}
	return ""
}

func (m *AccessLogEntry_Internal) GetRequestedServerName() string {
	if m != nil {
		return m.RequestedServerName
	}
	return ""
}

func (m *AccessLogEntry_Internal) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

type InsertAccessLogParameters struct {
	Severity                    string                      `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	Timestamp                   *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Variables                   *AccessLogEntry_Variables   `protobuf:"bytes,3,opt,name=variables" json:"variables,omitempty"`
	MonitoredResourceType       string                      `protobuf:"bytes,4,opt,name=monitoredResourceType,proto3" json:"monitoredResourceType,omitempty"`
	MonitoredResourceDimensions string                      `protobuf:"bytes,5,opt,name=monitoredResourceDimensions,proto3" json:"monitoredResourceDimensions,omitempty"`
}

func (m *InsertAccessLogParameters) Reset()                    { *m = InsertAccessLogParameters{} }
func (*InsertAccessLogParameters) ProtoMessage()               {}
func (*InsertAccessLogParameters) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{13} }

func (m *InsertAccessLogParameters) GetSeverity() string {
	if m != nil {
		return m.Severity
	}
	return ""
}

func (m *InsertAccessLogParameters) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *InsertAccessLogParameters) GetVariables() *AccessLogEntry_Variables {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *InsertAccessLogParameters) GetMonitoredResourceType() string {
	if m != nil {
		return m.MonitoredResourceType
	}
	return ""
}

func (m *InsertAccessLogParameters) GetMonitoredResourceDimensions() string {
	if m != nil {
		return m.MonitoredResourceDimensions
	}
	return ""
}

func init() {
	proto.RegisterType((*Status)(nil), "access.Status")
	proto.RegisterType((*Validity)(nil), "access.Validity")
	proto.RegisterType((*Raw)(nil), "access.Raw")
	proto.RegisterType((*Raw_Authorization)(nil), "access.Raw.Authorization")
	proto.RegisterType((*Credentials)(nil), "access.Credentials")
	proto.RegisterType((*Credentials_Username)(nil), "access.Credentials.Username")
	proto.RegisterType((*Credentials_Group)(nil), "access.Credentials.Group")
	proto.RegisterType((*Credentials_Password)(nil), "access.Credentials.Password")
	proto.RegisterType((*API)(nil), "access.API")
	proto.RegisterType((*API_Namespace)(nil), "access.API.Namespace")
	proto.RegisterType((*API_Name)(nil), "access.API.Name")
	proto.RegisterType((*API_Version)(nil), "access.API.Version")
	proto.RegisterType((*API_Resource)(nil), "access.API.Resource")
	proto.RegisterType((*API_Method)(nil), "access.API.Method")
	proto.RegisterType((*API_Key)(nil), "access.API.Key")
	proto.RegisterType((*VerifyAPIKeyParameters)(nil), "access.VerifyAPIKeyParameters")
	proto.RegisterType((*VerifyAPIKeyResult)(nil), "access.VerifyAPIKeyResult")
	proto.RegisterType((*AuthorizeAccessParameters)(nil), "access.AuthorizeAccessParameters")
	proto.RegisterType((*AuthorizeAccessParameters_Subject)(nil), "access.AuthorizeAccessParameters.Subject")
	proto.RegisterType((*AuthorizeAccessParameters_Action)(nil), "access.AuthorizeAccessParameters.Action")
	proto.RegisterType((*AuthorizeAccessResult)(nil), "access.AuthorizeAccessResult")
	proto.RegisterType((*InsertProfileParameters)(nil), "access.InsertProfileParameters")
	proto.RegisterType((*InsertProfileResult)(nil), "access.InsertProfileResult")
	proto.RegisterType((*InsertAccessLogResult)(nil), "access.InsertAccessLogResult")
	proto.RegisterType((*AccessLogEntry)(nil), "access.AccessLogEntry")
	proto.RegisterType((*AccessLogEntry_Variables)(nil), "access.AccessLogEntry.Variables")
	proto.RegisterType((*AccessLogEntry_Source)(nil), "access.AccessLogEntry.Source")
	proto.RegisterType((*AccessLogEntry_Destination)(nil), "access.AccessLogEntry.Destination")
	proto.RegisterType((*AccessLogEntry_Request)(nil), "access.AccessLogEntry.Request")
	proto.RegisterType((*AccessLogEntry_Response)(nil), "access.AccessLogEntry.Response")
	proto.RegisterType((*AccessLogEntry_Internal)(nil), "access.AccessLogEntry.Internal")
	proto.RegisterType((*InsertAccessLogParameters)(nil), "access.InsertAccessLogParameters")
	proto.RegisterEnum("access.Code", Code_name, Code_value)
}
func (x Code) String() string {
	s, ok := Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Validity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Validity)
	if !ok {
		that2, ok := that.(Validity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *Raw) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Raw)
	if !ok {
		that2, ok := that.(Raw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorization.Equal(that1.Authorization) {
		return false
	}
	return true
}
func (this *Raw_Authorization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Raw_Authorization)
	if !ok {
		that2, ok := that.(Raw_Authorization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *Credentials) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials)
	if !ok {
		that2, ok := that.(Credentials)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Username.Equal(that1.Username) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *Credentials_Username) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_Username)
	if !ok {
		that2, ok := that.(Credentials_Username)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *Credentials_Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_Group)
	if !ok {
		that2, ok := that.(Credentials_Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *Credentials_Password) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Credentials_Password)
	if !ok {
		that2, ok := that.(Credentials_Password)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API)
	if !ok {
		that2, ok := that.(API)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *API_Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Namespace)
	if !ok {
		that2, ok := that.(API_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Name) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Name)
	if !ok {
		that2, ok := that.(API_Name)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Version) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Version)
	if !ok {
		that2, ok := that.(API_Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Resource)
	if !ok {
		that2, ok := that.(API_Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Method) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Method)
	if !ok {
		that2, ok := that.(API_Method)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Key) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*API_Key)
	if !ok {
		that2, ok := that.(API_Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *VerifyAPIKeyParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyAPIKeyParameters)
	if !ok {
		that2, ok := that.(VerifyAPIKeyParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *VerifyAPIKeyResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyAPIKeyResult)
	if !ok {
		that2, ok := that.(VerifyAPIKeyResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Validity.Equal(that1.Validity) {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeAccessParameters)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Subject.Equal(that1.Subject) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.Raw.Equal(that1.Raw) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters_Subject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeAccessParameters_Subject)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters_Subject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Credentials.Equal(that1.Credentials) {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters_Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeAccessParameters_Action)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters_Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *AuthorizeAccessResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeAccessResult)
	if !ok {
		that2, ok := that.(AuthorizeAccessResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Validity.Equal(that1.Validity) {
		return false
	}
	return true
}
func (this *InsertProfileParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertProfileParameters)
	if !ok {
		that2, ok := that.(InsertProfileParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *InsertProfileResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertProfileResult)
	if !ok {
		that2, ok := that.(InsertProfileResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InsertAccessLogResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertAccessLogResult)
	if !ok {
		that2, ok := that.(InsertAccessLogResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *AccessLogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry)
	if !ok {
		that2, ok := that.(AccessLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AccessLogEntry_Variables) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Variables)
	if !ok {
		that2, ok := that.(AccessLogEntry_Variables)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.Destination.Equal(that1.Destination) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	if !this.Internal.Equal(that1.Internal) {
		return false
	}
	return true
}
func (this *AccessLogEntry_Source) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Source)
	if !ok {
		that2, ok := that.(AccessLogEntry_Source)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Ip, that1.Ip) {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.Principal != that1.Principal {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Workload != that1.Workload {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (this *AccessLogEntry_Destination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Destination)
	if !ok {
		that2, ok := that.(AccessLogEntry_Destination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Ip, that1.Ip) {
		return false
	}
	if this.App != that1.App {
		return false
	}
	if this.Servicehost != that1.Servicehost {
		return false
	}
	if this.Workload != that1.Workload {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Principal != that1.Principal {
		return false
	}
	return true
}
func (this *AccessLogEntry_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Request)
	if !ok {
		that2, ok := that.(AccessLogEntry_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiClaims != that1.ApiClaims {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.UrlPath != that1.UrlPath {
		return false
	}
	if this.RequestSize != that1.RequestSize {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.ClientTraceId != that1.ClientTraceId {
		return false
	}
	if this.UserAgent != that1.UserAgent {
		return false
	}
	if this.ReceivedBytes != that1.ReceivedBytes {
		return false
	}
	if this.Referer != that1.Referer {
		return false
	}
	if this.HttpAuthority != that1.HttpAuthority {
		return false
	}
	if this.XForwardedFor != that1.XForwardedFor {
		return false
	}
	return true
}
func (this *AccessLogEntry_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Response)
	if !ok {
		that2, ok := that.(AccessLogEntry_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResponseCode != that1.ResponseCode {
		return false
	}
	if this.ResponseSize != that1.ResponseSize {
		return false
	}
	if !this.Latency.Equal(that1.Latency) {
		return false
	}
	if !this.ResponseTimestamp.Equal(that1.ResponseTimestamp) {
		return false
	}
	if this.SentBytes != that1.SentBytes {
		return false
	}
	if this.GrpcStatus != that1.GrpcStatus {
		return false
	}
	if this.GrpcMessage != that1.GrpcMessage {
		return false
	}
	return true
}
func (this *AccessLogEntry_Internal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessLogEntry_Internal)
	if !ok {
		that2, ok := that.(AccessLogEntry_Internal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionSecurityPolicy != that1.ConnectionSecurityPolicy {
		return false
	}
	if this.RequestedServerName != that1.RequestedServerName {
		return false
	}
	if this.Reporter != that1.Reporter {
		return false
	}
	return true
}
func (this *InsertAccessLogParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertAccessLogParameters)
	if !ok {
		that2, ok := that.(InsertAccessLogParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Severity != that1.Severity {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if !this.Variables.Equal(that1.Variables) {
		return false
	}
	if this.MonitoredResourceType != that1.MonitoredResourceType {
		return false
	}
	if this.MonitoredResourceDimensions != that1.MonitoredResourceDimensions {
		return false
	}
	return true
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Validity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.Validity{")
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Raw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.Raw{")
	if this.Authorization != nil {
		s = append(s, "Authorization: "+fmt.Sprintf("%#v", this.Authorization)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Raw_Authorization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.Raw_Authorization{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access.Credentials{")
	if this.Username != nil {
		s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials_Username) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.Credentials_Username{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials_Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.Credentials_Group{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Credentials_Password) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.Credentials_Password{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&access.API{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Namespace{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Name) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Name{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Version{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Resource{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Method) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Method{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Key{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyAPIKeyParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&access.VerifyAPIKeyParameters{")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.Method != nil {
		s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	}
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyAPIKeyResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.VerifyAPIKeyResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Validity != nil {
		s = append(s, "Validity: "+fmt.Sprintf("%#v", this.Validity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&access.AuthorizeAccessParameters{")
	if this.Subject != nil {
		s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Raw != nil {
		s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters_Subject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.AuthorizeAccessParameters_Subject{")
	if this.Credentials != nil {
		s = append(s, "Credentials: "+fmt.Sprintf("%#v", this.Credentials)+",\n")
	}
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters_Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&access.AuthorizeAccessParameters_Action{")
	if this.Namespace != nil {
		s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	}
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.Method != nil {
		s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	}
	if this.Resource != nil {
		s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.AuthorizeAccessResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Validity != nil {
		s = append(s, "Validity: "+fmt.Sprintf("%#v", this.Validity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertProfileParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.InsertProfileParameters{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertProfileResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&access.InsertProfileResult{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertAccessLogResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.InsertAccessLogResult{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&access.AccessLogEntry{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Variables) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&access.AccessLogEntry_Variables{")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Destination != nil {
		s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	}
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	if this.Internal != nil {
		s = append(s, "Internal: "+fmt.Sprintf("%#v", this.Internal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Source) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&access.AccessLogEntry_Source{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "Principal: "+fmt.Sprintf("%#v", this.Principal)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Workload: "+fmt.Sprintf("%#v", this.Workload)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Destination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&access.AccessLogEntry_Destination{")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	s = append(s, "Servicehost: "+fmt.Sprintf("%#v", this.Servicehost)+",\n")
	s = append(s, "Workload: "+fmt.Sprintf("%#v", this.Workload)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "Principal: "+fmt.Sprintf("%#v", this.Principal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&access.AccessLogEntry_Request{")
	s = append(s, "ApiClaims: "+fmt.Sprintf("%#v", this.ApiClaims)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "UrlPath: "+fmt.Sprintf("%#v", this.UrlPath)+",\n")
	s = append(s, "RequestSize: "+fmt.Sprintf("%#v", this.RequestSize)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "ClientTraceId: "+fmt.Sprintf("%#v", this.ClientTraceId)+",\n")
	s = append(s, "UserAgent: "+fmt.Sprintf("%#v", this.UserAgent)+",\n")
	s = append(s, "ReceivedBytes: "+fmt.Sprintf("%#v", this.ReceivedBytes)+",\n")
	s = append(s, "Referer: "+fmt.Sprintf("%#v", this.Referer)+",\n")
	s = append(s, "HttpAuthority: "+fmt.Sprintf("%#v", this.HttpAuthority)+",\n")
	s = append(s, "XForwardedFor: "+fmt.Sprintf("%#v", this.XForwardedFor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&access.AccessLogEntry_Response{")
	s = append(s, "ResponseCode: "+fmt.Sprintf("%#v", this.ResponseCode)+",\n")
	s = append(s, "ResponseSize: "+fmt.Sprintf("%#v", this.ResponseSize)+",\n")
	if this.Latency != nil {
		s = append(s, "Latency: "+fmt.Sprintf("%#v", this.Latency)+",\n")
	}
	if this.ResponseTimestamp != nil {
		s = append(s, "ResponseTimestamp: "+fmt.Sprintf("%#v", this.ResponseTimestamp)+",\n")
	}
	s = append(s, "SentBytes: "+fmt.Sprintf("%#v", this.SentBytes)+",\n")
	s = append(s, "GrpcStatus: "+fmt.Sprintf("%#v", this.GrpcStatus)+",\n")
	s = append(s, "GrpcMessage: "+fmt.Sprintf("%#v", this.GrpcMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessLogEntry_Internal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access.AccessLogEntry_Internal{")
	s = append(s, "ConnectionSecurityPolicy: "+fmt.Sprintf("%#v", this.ConnectionSecurityPolicy)+",\n")
	s = append(s, "RequestedServerName: "+fmt.Sprintf("%#v", this.RequestedServerName)+",\n")
	s = append(s, "Reporter: "+fmt.Sprintf("%#v", this.Reporter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertAccessLogParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&access.InsertAccessLogParameters{")
	s = append(s, "Severity: "+fmt.Sprintf("%#v", this.Severity)+",\n")
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	if this.Variables != nil {
		s = append(s, "Variables: "+fmt.Sprintf("%#v", this.Variables)+",\n")
	}
	s = append(s, "MonitoredResourceType: "+fmt.Sprintf("%#v", this.MonitoredResourceType)+",\n")
	s = append(s, "MonitoredResourceDimensions: "+fmt.Sprintf("%#v", this.MonitoredResourceDimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAccess(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// VerifyAPIKey verifies an API key.
	VerifyAPIKey(ctx context.Context, in *VerifyAPIKeyParameters, opts ...grpc.CallOption) (*VerifyAPIKeyResult, error)
	// AuthorizeAccess authorizes API accesses.
	AuthorizeAccess(ctx context.Context, in *AuthorizeAccessParameters, opts ...grpc.CallOption) (*AuthorizeAccessResult, error)
	// InsertProfile inserts a newly created profile into the Platform database.
	InsertProfile(ctx context.Context, in *InsertProfileParameters, opts ...grpc.CallOption) (*InsertProfileResult, error)
	InsertAccessLog(ctx context.Context, in *InsertAccessLogParameters, opts ...grpc.CallOption) (*InsertAccessLogResult, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) VerifyAPIKey(ctx context.Context, in *VerifyAPIKeyParameters, opts ...grpc.CallOption) (*VerifyAPIKeyResult, error) {
	out := new(VerifyAPIKeyResult)
	err := grpc.Invoke(ctx, "/access.Controller/VerifyAPIKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AuthorizeAccess(ctx context.Context, in *AuthorizeAccessParameters, opts ...grpc.CallOption) (*AuthorizeAccessResult, error) {
	out := new(AuthorizeAccessResult)
	err := grpc.Invoke(ctx, "/access.Controller/AuthorizeAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) InsertProfile(ctx context.Context, in *InsertProfileParameters, opts ...grpc.CallOption) (*InsertProfileResult, error) {
	out := new(InsertProfileResult)
	err := grpc.Invoke(ctx, "/access.Controller/InsertProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) InsertAccessLog(ctx context.Context, in *InsertAccessLogParameters, opts ...grpc.CallOption) (*InsertAccessLogResult, error) {
	out := new(InsertAccessLogResult)
	err := grpc.Invoke(ctx, "/access.Controller/InsertAccessLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// VerifyAPIKey verifies an API key.
	VerifyAPIKey(context.Context, *VerifyAPIKeyParameters) (*VerifyAPIKeyResult, error)
	// AuthorizeAccess authorizes API accesses.
	AuthorizeAccess(context.Context, *AuthorizeAccessParameters) (*AuthorizeAccessResult, error)
	// InsertProfile inserts a newly created profile into the Platform database.
	InsertProfile(context.Context, *InsertProfileParameters) (*InsertProfileResult, error)
	InsertAccessLog(context.Context, *InsertAccessLogParameters) (*InsertAccessLogResult, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_VerifyAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAPIKeyParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).VerifyAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.Controller/VerifyAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).VerifyAPIKey(ctx, req.(*VerifyAPIKeyParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AuthorizeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAccessParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AuthorizeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.Controller/AuthorizeAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AuthorizeAccess(ctx, req.(*AuthorizeAccessParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_InsertProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertProfileParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).InsertProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.Controller/InsertProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).InsertProfile(ctx, req.(*InsertProfileParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_InsertAccessLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAccessLogParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).InsertAccessLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.Controller/InsertAccessLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).InsertAccessLog(ctx, req.(*InsertAccessLogParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyAPIKey",
			Handler:    _Controller_VerifyAPIKey_Handler,
		},
		{
			MethodName: "AuthorizeAccess",
			Handler:    _Controller_AuthorizeAccess_Handler,
		},
		{
			MethodName: "InsertProfile",
			Handler:    _Controller_InsertProfile_Handler,
		},
		{
			MethodName: "InsertAccessLog",
			Handler:    _Controller_InsertAccessLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixer/adapter/airmap/access/access.proto",
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Validity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Duration.Size()))
		n1, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *Raw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Raw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Authorization != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Authorization.Size()))
		n2, err := m.Authorization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Raw_Authorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Raw_Authorization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *Credentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Username != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Username.Size()))
		n3, err := m.Username.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAccess(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Password != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Password.Size()))
		n4, err := m.Password.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *Credentials_Username) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials_Username) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *Credentials_Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials_Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *Credentials_Password) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials_Password) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *API_Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Namespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Name) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Method) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Method) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *VerifyAPIKeyParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAPIKeyParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Name.Size()))
		n5, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Version != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Version.Size()))
		n6, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Method != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Method.Size()))
		n7, err := m.Method.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Key != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Timestamp.Size()))
		n9, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *VerifyAPIKeyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyAPIKeyResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Validity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Validity.Size()))
		n11, err := m.Validity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *AuthorizeAccessParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subject != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Subject.Size()))
		n12, err := m.Subject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Action != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Action.Size()))
		n13, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Raw != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Raw.Size()))
		n14, err := m.Raw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Timestamp.Size()))
		n15, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *AuthorizeAccessParameters_Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters_Subject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Credentials != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Credentials.Size()))
		n16, err := m.Credentials.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Key.Size()))
		n17, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *AuthorizeAccessParameters_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters_Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Namespace != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Namespace.Size()))
		n18, err := m.Namespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Name.Size()))
		n19, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Version != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Version.Size()))
		n20, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Method != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Method.Size()))
		n21, err := m.Method.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Resource != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Resource.Size()))
		n22, err := m.Resource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *AuthorizeAccessResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Status.Size()))
		n23, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Validity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Validity.Size()))
		n24, err := m.Validity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *InsertProfileParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertProfileParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	return i, nil
}

func (m *InsertProfileResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertProfileResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InsertAccessLogResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertAccessLogResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *AccessLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccessLogEntry_Variables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Variables) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Source.Size()))
		n25, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Destination != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Destination.Size()))
		n26, err := m.Destination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Request != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Request.Size()))
		n27, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Response != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Response.Size()))
		n28, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Internal != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Internal.Size()))
		n29, err := m.Internal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *AccessLogEntry_Source) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Source) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.App) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	if len(m.Principal) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Workload) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Workload)))
		i += copy(dAtA[i:], m.Workload)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	return i, nil
}

func (m *AccessLogEntry_Destination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Destination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.App) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	if len(m.Servicehost) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Servicehost)))
		i += copy(dAtA[i:], m.Servicehost)
	}
	if len(m.Workload) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Workload)))
		i += copy(dAtA[i:], m.Workload)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Principal) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Principal)))
		i += copy(dAtA[i:], m.Principal)
	}
	return i, nil
}

func (m *AccessLogEntry_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiClaims) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.ApiClaims)))
		i += copy(dAtA[i:], m.ApiClaims)
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.UrlPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.UrlPath)))
		i += copy(dAtA[i:], m.UrlPath)
	}
	if m.RequestSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.RequestSize))
	}
	if m.RequestId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.RequestId))
	}
	if len(m.ClientTraceId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.ClientTraceId)))
		i += copy(dAtA[i:], m.ClientTraceId)
	}
	if len(m.UserAgent) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.UserAgent)))
		i += copy(dAtA[i:], m.UserAgent)
	}
	if m.ReceivedBytes != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.ReceivedBytes))
	}
	if len(m.Referer) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Referer)))
		i += copy(dAtA[i:], m.Referer)
	}
	if len(m.HttpAuthority) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.HttpAuthority)))
		i += copy(dAtA[i:], m.HttpAuthority)
	}
	if len(m.XForwardedFor) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.XForwardedFor)))
		i += copy(dAtA[i:], m.XForwardedFor)
	}
	return i, nil
}

func (m *AccessLogEntry_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponseCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.ResponseCode))
	}
	if m.ResponseSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.ResponseSize))
	}
	if m.Latency != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Latency.Size()))
		n30, err := m.Latency.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.ResponseTimestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.ResponseTimestamp.Size()))
		n31, err := m.ResponseTimestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.SentBytes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.SentBytes))
	}
	if len(m.GrpcStatus) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.GrpcStatus)))
		i += copy(dAtA[i:], m.GrpcStatus)
	}
	if len(m.GrpcMessage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.GrpcMessage)))
		i += copy(dAtA[i:], m.GrpcMessage)
	}
	return i, nil
}

func (m *AccessLogEntry_Internal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessLogEntry_Internal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ConnectionSecurityPolicy) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.ConnectionSecurityPolicy)))
		i += copy(dAtA[i:], m.ConnectionSecurityPolicy)
	}
	if len(m.RequestedServerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.RequestedServerName)))
		i += copy(dAtA[i:], m.RequestedServerName)
	}
	if len(m.Reporter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Reporter)))
		i += copy(dAtA[i:], m.Reporter)
	}
	return i, nil
}

func (m *InsertAccessLogParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertAccessLogParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Severity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Severity)))
		i += copy(dAtA[i:], m.Severity)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Timestamp.Size()))
		n32, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Variables != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Variables.Size()))
		n33, err := m.Variables.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.MonitoredResourceType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.MonitoredResourceType)))
		i += copy(dAtA[i:], m.MonitoredResourceType)
	}
	if len(m.MonitoredResourceDimensions) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.MonitoredResourceDimensions)))
		i += copy(dAtA[i:], m.MonitoredResourceDimensions)
	}
	return i, nil
}

func encodeVarintAccess(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAccess(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Validity) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovAccess(uint64(m.Count))
	}
	return n
}

func (m *Raw) Size() (n int) {
	var l int
	_ = l
	if m.Authorization != nil {
		l = m.Authorization.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Raw_Authorization) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Credentials) Size() (n int) {
	var l int
	_ = l
	if m.Username != nil {
		l = m.Username.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovAccess(uint64(l))
		}
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Credentials_Username) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Credentials_Group) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Credentials_Password) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *API_Namespace) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Name) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Resource) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Method) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *VerifyAPIKeyParameters) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Method != nil {
		l = m.Method.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *VerifyAPIKeyResult) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters) Size() (n int) {
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Raw != nil {
		l = m.Raw.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters_Subject) Size() (n int) {
	var l int
	_ = l
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters_Action) Size() (n int) {
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Method != nil {
		l = m.Method.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessResult) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *InsertProfileParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *InsertProfileResult) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InsertAccessLogResult) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAccess(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AccessLogEntry_Variables) Size() (n int) {
	var l int
	_ = l
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Internal != nil {
		l = m.Internal.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry_Source) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Workload)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry_Destination) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Servicehost)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Workload)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry_Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.ApiClaims)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.UrlPath)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.RequestSize != 0 {
		n += 1 + sovAccess(uint64(m.RequestSize))
	}
	if m.RequestId != 0 {
		n += 1 + sovAccess(uint64(m.RequestId))
	}
	l = len(m.ClientTraceId)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.ReceivedBytes != 0 {
		n += 1 + sovAccess(uint64(m.ReceivedBytes))
	}
	l = len(m.Referer)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.HttpAuthority)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.XForwardedFor)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry_Response) Size() (n int) {
	var l int
	_ = l
	if m.ResponseCode != 0 {
		n += 1 + sovAccess(uint64(m.ResponseCode))
	}
	if m.ResponseSize != 0 {
		n += 1 + sovAccess(uint64(m.ResponseSize))
	}
	if m.Latency != nil {
		l = m.Latency.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.ResponseTimestamp != nil {
		l = m.ResponseTimestamp.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.SentBytes != 0 {
		n += 1 + sovAccess(uint64(m.SentBytes))
	}
	l = len(m.GrpcStatus)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.GrpcMessage)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AccessLogEntry_Internal) Size() (n int) {
	var l int
	_ = l
	l = len(m.ConnectionSecurityPolicy)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.RequestedServerName)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *InsertAccessLogParameters) Size() (n int) {
	var l int
	_ = l
	l = len(m.Severity)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Variables != nil {
		l = m.Variables.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.MonitoredResourceType)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.MonitoredResourceDimensions)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func sovAccess(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccess(x uint64) (n int) {
	return sovAccess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Validity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Validity{`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "google_protobuf.Duration", 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Raw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Raw{`,
		`Authorization:` + strings.Replace(fmt.Sprintf("%v", this.Authorization), "Raw_Authorization", "Raw_Authorization", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Raw_Authorization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Raw_Authorization{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials{`,
		`Username:` + strings.Replace(fmt.Sprintf("%v", this.Username), "Credentials_Username", "Credentials_Username", 1) + `,`,
		`Groups:` + strings.Replace(fmt.Sprintf("%v", this.Groups), "Credentials_Group", "Credentials_Group", 1) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "Credentials_Password", "Credentials_Password", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_Username) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_Username{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_Group{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credentials_Password) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credentials_Password{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API{`,
		`}`,
	}, "")
	return s
}
func (this *API_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Namespace{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Name) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Name{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Version) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Version{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Resource{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Method) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Method{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Key{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyAPIKeyParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyAPIKeyParameters{`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "API_Name", "API_Name", 1) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "API_Version", "API_Version", 1) + `,`,
		`Method:` + strings.Replace(fmt.Sprintf("%v", this.Method), "API_Method", "API_Method", 1) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "API_Key", "API_Key", 1) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyAPIKeyResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyAPIKeyResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`Validity:` + strings.Replace(fmt.Sprintf("%v", this.Validity), "Validity", "Validity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters{`,
		`Subject:` + strings.Replace(fmt.Sprintf("%v", this.Subject), "AuthorizeAccessParameters_Subject", "AuthorizeAccessParameters_Subject", 1) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "AuthorizeAccessParameters_Action", "AuthorizeAccessParameters_Action", 1) + `,`,
		`Raw:` + strings.Replace(fmt.Sprintf("%v", this.Raw), "Raw", "Raw", 1) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters_Subject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters_Subject{`,
		`Credentials:` + strings.Replace(fmt.Sprintf("%v", this.Credentials), "Credentials", "Credentials", 1) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "API_Key", "API_Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters_Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters_Action{`,
		`Namespace:` + strings.Replace(fmt.Sprintf("%v", this.Namespace), "API_Namespace", "API_Namespace", 1) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "API_Name", "API_Name", 1) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "API_Version", "API_Version", 1) + `,`,
		`Method:` + strings.Replace(fmt.Sprintf("%v", this.Method), "API_Method", "API_Method", 1) + `,`,
		`Resource:` + strings.Replace(fmt.Sprintf("%v", this.Resource), "API_Resource", "API_Resource", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`Validity:` + strings.Replace(fmt.Sprintf("%v", this.Validity), "Validity", "Validity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertProfileParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertProfileParameters{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertProfileResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertProfileResult{`,
		`}`,
	}, "")
	return s
}
func (this *InsertAccessLogResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertAccessLogResult{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry{`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Variables) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Variables{`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "AccessLogEntry_Source", "AccessLogEntry_Source", 1) + `,`,
		`Destination:` + strings.Replace(fmt.Sprintf("%v", this.Destination), "AccessLogEntry_Destination", "AccessLogEntry_Destination", 1) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "AccessLogEntry_Request", "AccessLogEntry_Request", 1) + `,`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "AccessLogEntry_Response", "AccessLogEntry_Response", 1) + `,`,
		`Internal:` + strings.Replace(fmt.Sprintf("%v", this.Internal), "AccessLogEntry_Internal", "AccessLogEntry_Internal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Source) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Source{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`Principal:` + fmt.Sprintf("%v", this.Principal) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Workload:` + fmt.Sprintf("%v", this.Workload) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Destination) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Destination{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`App:` + fmt.Sprintf("%v", this.App) + `,`,
		`Servicehost:` + fmt.Sprintf("%v", this.Servicehost) + `,`,
		`Workload:` + fmt.Sprintf("%v", this.Workload) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Principal:` + fmt.Sprintf("%v", this.Principal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Request{`,
		`ApiClaims:` + fmt.Sprintf("%v", this.ApiClaims) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`UrlPath:` + fmt.Sprintf("%v", this.UrlPath) + `,`,
		`RequestSize:` + fmt.Sprintf("%v", this.RequestSize) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`ClientTraceId:` + fmt.Sprintf("%v", this.ClientTraceId) + `,`,
		`UserAgent:` + fmt.Sprintf("%v", this.UserAgent) + `,`,
		`ReceivedBytes:` + fmt.Sprintf("%v", this.ReceivedBytes) + `,`,
		`Referer:` + fmt.Sprintf("%v", this.Referer) + `,`,
		`HttpAuthority:` + fmt.Sprintf("%v", this.HttpAuthority) + `,`,
		`XForwardedFor:` + fmt.Sprintf("%v", this.XForwardedFor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Response{`,
		`ResponseCode:` + fmt.Sprintf("%v", this.ResponseCode) + `,`,
		`ResponseSize:` + fmt.Sprintf("%v", this.ResponseSize) + `,`,
		`Latency:` + strings.Replace(fmt.Sprintf("%v", this.Latency), "Duration", "google_protobuf.Duration", 1) + `,`,
		`ResponseTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.ResponseTimestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`SentBytes:` + fmt.Sprintf("%v", this.SentBytes) + `,`,
		`GrpcStatus:` + fmt.Sprintf("%v", this.GrpcStatus) + `,`,
		`GrpcMessage:` + fmt.Sprintf("%v", this.GrpcMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessLogEntry_Internal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessLogEntry_Internal{`,
		`ConnectionSecurityPolicy:` + fmt.Sprintf("%v", this.ConnectionSecurityPolicy) + `,`,
		`RequestedServerName:` + fmt.Sprintf("%v", this.RequestedServerName) + `,`,
		`Reporter:` + fmt.Sprintf("%v", this.Reporter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InsertAccessLogParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InsertAccessLogParameters{`,
		`Severity:` + fmt.Sprintf("%v", this.Severity) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Variables:` + strings.Replace(fmt.Sprintf("%v", this.Variables), "AccessLogEntry_Variables", "AccessLogEntry_Variables", 1) + `,`,
		`MonitoredResourceType:` + fmt.Sprintf("%v", this.MonitoredResourceType) + `,`,
		`MonitoredResourceDimensions:` + fmt.Sprintf("%v", this.MonitoredResourceDimensions) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAccess(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Raw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Raw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Raw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authorization == nil {
				m.Authorization = &Raw_Authorization{}
			}
			if err := m.Authorization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Raw_Authorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Username == nil {
				m.Username = &Credentials_Username{}
			}
			if err := m.Username.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Credentials_Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &Credentials_Password{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials_Username) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Username: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Username: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials_Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials_Password) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Password: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Password: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: API: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: API: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Method) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Method: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Method: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAPIKeyParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAPIKeyParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAPIKeyParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &API_Name{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &API_Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Method == nil {
				m.Method = &API_Method{}
			}
			if err := m.Method.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &API_Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyAPIKeyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyAPIKeyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyAPIKeyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Validity{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAccessParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAccessParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &AuthorizeAccessParameters_Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &AuthorizeAccessParameters_Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raw == nil {
				m.Raw = &Raw{}
			}
			if err := m.Raw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters_Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &Credentials{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &API_Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &API_Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &API_Name{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &API_Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Method == nil {
				m.Method = &API_Method{}
			}
			if err := m.Method.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &API_Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAccessResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAccessResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Validity{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertProfileParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertProfileParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertProfileParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertProfileResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertProfileResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertProfileResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertAccessLogResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertAccessLogResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertAccessLogResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Variables) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &AccessLogEntry_Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &AccessLogEntry_Destination{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &AccessLogEntry_Request{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &AccessLogEntry_Response{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Internal == nil {
				m.Internal = &AccessLogEntry_Internal{}
			}
			if err := m.Internal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Source) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Destination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Destination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Destination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = append(m.Ip[:0], dAtA[iNdEx:postIndex]...)
			if m.Ip == nil {
				m.Ip = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicehost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servicehost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiClaims", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiClaims = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestSize", wireType)
			}
			m.RequestSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientTraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedBytes", wireType)
			}
			m.ReceivedBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XForwardedFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XForwardedFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			m.ResponseCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseCode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseSize", wireType)
			}
			m.ResponseSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latency == nil {
				m.Latency = &google_protobuf.Duration{}
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseTimestamp == nil {
				m.ResponseTimestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.ResponseTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentBytes", wireType)
			}
			m.SentBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrpcMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessLogEntry_Internal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Internal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Internal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionSecurityPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionSecurityPolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertAccessLogParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertAccessLogParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertAccessLogParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Severity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variables == nil {
				m.Variables = &AccessLogEntry_Variables{}
			}
			if err := m.Variables.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoredResourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoredResourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonitoredResourceDimensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MonitoredResourceDimensions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAccess
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccess
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccess(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccess = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccess   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/adapter/airmap/access/access.proto", fileDescriptorAccess) }

var fileDescriptorAccess = []byte{
	// 1703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x72, 0x1b, 0xc7,
	0x11, 0x26, 0x7e, 0x08, 0x60, 0x1b, 0x24, 0x45, 0x8d, 0x44, 0x1b, 0x5a, 0x59, 0x30, 0x05, 0xdb,
	0x32, 0xe3, 0x52, 0xa0, 0x84, 0x8a, 0xaa, 0x54, 0x95, 0x54, 0x6c, 0x9a, 0xb4, 0x52, 0x88, 0x22,
	0x85, 0x19, 0xca, 0xca, 0x11, 0x35, 0xdc, 0x6d, 0x92, 0x63, 0x2f, 0x76, 0x37, 0x33, 0x03, 0x52,
	0xd0, 0x29, 0x8f, 0x90, 0x63, 0x1e, 0x21, 0xa9, 0xf2, 0x35, 0x97, 0x54, 0x1e, 0x20, 0x47, 0xa7,
	0x7c, 0xc9, 0x31, 0x62, 0x72, 0xc8, 0x51, 0xa7, 0x9c, 0x53, 0xf3, 0xb7, 0x58, 0xd0, 0x04, 0x69,
	0xa5, 0x2a, 0x27, 0x60, 0xba, 0xbf, 0x9e, 0xe9, 0xee, 0xf9, 0xba, 0xa7, 0x17, 0x36, 0x46, 0xfc,
	0x05, 0x8a, 0x7b, 0x2c, 0x66, 0xb9, 0xd2, 0xbf, 0x5c, 0x8c, 0x58, 0x7e, 0x8f, 0x45, 0x11, 0x4a,
	0xe9, 0x7e, 0xfa, 0xb9, 0xc8, 0x54, 0x46, 0x1a, 0x76, 0x15, 0x76, 0x0f, 0xb3, 0xec, 0x30, 0xc1,
	0x7b, 0x46, 0xba, 0x3f, 0x3e, 0xb8, 0x17, 0x8f, 0x05, 0x53, 0x3c, 0x4b, 0x2d, 0x2e, 0x7c, 0xf7,
	0xac, 0x5e, 0xf1, 0x11, 0x4a, 0xc5, 0x46, 0xb9, 0x05, 0xf4, 0x76, 0xa0, 0xb1, 0xa7, 0x98, 0x1a,
	0x4b, 0xb2, 0x0e, 0xf5, 0x28, 0x8b, 0xb1, 0x53, 0x59, 0xaf, 0x6c, 0xac, 0x6c, 0x2e, 0xf5, 0xdd,
	0x79, 0xdb, 0x59, 0x8c, 0xd4, 0x68, 0x48, 0x07, 0x9a, 0x23, 0x94, 0x92, 0x1d, 0x62, 0xa7, 0xba,
	0x5e, 0xd9, 0x08, 0xa8, 0x5f, 0xf6, 0x7e, 0x0d, 0xad, 0xe7, 0x2c, 0xe1, 0x31, 0x57, 0x13, 0xf2,
	0x00, 0x5a, 0xde, 0x09, 0xb3, 0x57, 0x7b, 0xf3, 0x46, 0xdf, 0x7a, 0xd1, 0xf7, 0x5e, 0xf4, 0x77,
	0x1c, 0x80, 0x16, 0x50, 0x72, 0x1d, 0x16, 0xa3, 0x6c, 0x9c, 0x2a, 0xb3, 0x75, 0x9d, 0xda, 0x45,
	0x4f, 0x41, 0x8d, 0xb2, 0x13, 0xf2, 0x31, 0x2c, 0xb3, 0xb1, 0x3a, 0xca, 0x04, 0x7f, 0x39, 0xbb,
	0xb1, 0x73, 0x92, 0xb2, 0x93, 0xfe, 0x56, 0x19, 0x40, 0x67, 0xf1, 0xe1, 0x5d, 0x58, 0x9e, 0xd1,
	0x93, 0x9b, 0x10, 0x30, 0x39, 0x94, 0x4a, 0xf0, 0xf4, 0xd0, 0xec, 0x16, 0xd0, 0x16, 0x93, 0x7b,
	0x66, 0xdd, 0xfb, 0xaa, 0x0a, 0xed, 0x6d, 0x81, 0x31, 0xa6, 0x8a, 0xb3, 0x44, 0x92, 0x87, 0xd0,
	0x1a, 0x4b, 0x14, 0x29, 0x1b, 0xa1, 0x3b, 0xf9, 0x9d, 0x22, 0x3d, 0x53, 0x58, 0xff, 0x73, 0x87,
	0xa1, 0x05, 0x9a, 0xfc, 0x10, 0x1a, 0x87, 0x22, 0x1b, 0xe7, 0xb2, 0x53, 0x5d, 0xaf, 0x95, 0x3d,
	0x2e, 0xdb, 0xfd, 0x4c, 0x23, 0xa8, 0x03, 0xea, 0xc3, 0x72, 0x26, 0xe5, 0x49, 0x26, 0xe2, 0x4e,
	0x6d, 0xfe, 0x61, 0xbb, 0x0e, 0x43, 0x0b, 0x74, 0xf8, 0x21, 0xb4, 0xbc, 0x0b, 0x17, 0xc6, 0x17,
	0xbe, 0x0f, 0x8b, 0xe6, 0xcc, 0x8b, 0x51, 0x1f, 0x42, 0xcb, 0x1f, 0x72, 0x71, 0xba, 0x5e, 0x57,
	0xa0, 0xb6, 0xb5, 0x3b, 0x08, 0x37, 0x20, 0x78, 0xca, 0x46, 0x28, 0x73, 0x16, 0x5d, 0xe2, 0xc0,
	0x7b, 0x50, 0x7f, 0x7a, 0xa9, 0x97, 0x77, 0xa0, 0xf9, 0x1c, 0x85, 0xbc, 0xec, 0xb6, 0xb4, 0x9f,
	0x14, 0x65, 0x36, 0x16, 0x97, 0x9d, 0xfa, 0x01, 0x34, 0x9e, 0xa0, 0x3a, 0xca, 0x2e, 0x0e, 0x27,
	0xec, 0x41, 0xed, 0x31, 0x4e, 0x2e, 0x0e, 0xf9, 0x3f, 0x15, 0x78, 0xeb, 0x39, 0x0a, 0x7e, 0x30,
	0xd9, 0xda, 0x1d, 0x3c, 0xc6, 0xc9, 0x2e, 0x13, 0x6c, 0x84, 0x0a, 0x85, 0x24, 0xef, 0x43, 0xbd,
	0x44, 0x94, 0x55, 0x7f, 0x77, 0x5b, 0xbb, 0x83, 0xbe, 0x8e, 0x99, 0x1a, 0x2d, 0xf9, 0x3e, 0x34,
	0x8f, 0x6d, 0x70, 0x86, 0xf0, 0xed, 0xcd, 0x6b, 0x65, 0xa0, 0x8b, 0x9b, 0x7a, 0x0c, 0xf9, 0x08,
	0x1a, 0x23, 0xe3, 0xba, 0xa3, 0x04, 0x29, 0xa3, 0x6d, 0x50, 0xd4, 0x21, 0xc8, 0x6d, 0xa8, 0x7d,
	0x89, 0x93, 0x4e, 0xdd, 0x00, 0xaf, 0x94, 0x81, 0x8f, 0x71, 0x42, 0xb5, 0x8e, 0x3c, 0x84, 0xa0,
	0x68, 0x04, 0x9d, 0x45, 0x03, 0x0c, 0xbf, 0x55, 0xa4, 0xcf, 0x3c, 0x82, 0x4e, 0xc1, 0xbd, 0x2f,
	0x80, 0x94, 0xe3, 0xa6, 0x28, 0xc7, 0x89, 0x22, 0x77, 0xa0, 0x21, 0x4d, 0x17, 0x71, 0x51, 0xaf,
	0xf8, 0x53, 0x6d, 0x6f, 0xa1, 0x4e, 0x4b, 0xee, 0x42, 0xeb, 0xd8, 0xf5, 0x09, 0x17, 0x76, 0x91,
	0x1f, 0xdf, 0x3f, 0x68, 0x81, 0xe8, 0x7d, 0x53, 0x87, 0x1b, 0xbe, 0x6a, 0x71, 0xcb, 0xc0, 0x4a,
	0x79, 0xde, 0x86, 0xa6, 0x1c, 0xef, 0x7f, 0x81, 0x91, 0x72, 0x87, 0x7e, 0xaf, 0x08, 0x75, 0x9e,
	0x4d, 0x7f, 0xcf, 0x1a, 0x50, 0x6f, 0x49, 0x3e, 0x81, 0x06, 0x8b, 0xd4, 0xf4, 0x16, 0x36, 0x2e,
	0xdf, 0x63, 0xcb, 0xe0, 0xa9, 0xb3, 0x23, 0xb7, 0xa0, 0x26, 0xd8, 0x89, 0xbb, 0x96, 0x76, 0xa9,
	0x21, 0x51, 0x2d, 0x9f, 0xcd, 0x74, 0xfd, 0x0d, 0x32, 0x1d, 0x46, 0xd0, 0x74, 0xee, 0x92, 0x07,
	0xd0, 0x8e, 0xa6, 0xa5, 0xef, 0xc2, 0xbd, 0x76, 0x4e, 0x57, 0xa0, 0x65, 0x9c, 0x27, 0x42, 0x75,
	0x3e, 0x11, 0xc2, 0xd7, 0x15, 0x68, 0xd8, 0x80, 0xc8, 0x7d, 0x08, 0x52, 0x5f, 0xbd, 0xee, 0x88,
	0xb5, 0xb3, 0xe4, 0x35, 0x4a, 0x3a, 0xc5, 0x15, 0x64, 0xaf, 0x7e, 0x57, 0xb2, 0xd7, 0xde, 0x88,
	0xec, 0xf5, 0x4b, 0xc9, 0xfe, 0x03, 0x68, 0x09, 0x57, 0xfc, 0x8e, 0xc8, 0xd7, 0xcb, 0x68, 0xdf,
	0x18, 0x68, 0x81, 0xea, 0x8d, 0x60, 0xed, 0xcc, 0xe5, 0xfe, 0x5f, 0x49, 0xfc, 0x31, 0xbc, 0x3d,
	0x48, 0x25, 0x0a, 0xb5, 0x2b, 0xb2, 0x03, 0x9e, 0x60, 0x89, 0xc1, 0x2b, 0x50, 0x1d, 0xec, 0xb8,
	0xd6, 0x52, 0x1d, 0xec, 0xe8, 0x27, 0x10, 0x47, 0x8c, 0x27, 0xee, 0x75, 0xb5, 0x8b, 0xde, 0x1a,
	0x5c, 0x9b, 0xd9, 0xc0, 0x7a, 0xdb, 0x1b, 0xc0, 0x9a, 0x15, 0xdb, 0x18, 0x7e, 0x91, 0x1d, 0xba,
	0x30, 0xde, 0x9a, 0x09, 0x63, 0xb1, 0x70, 0x7b, 0xfe, 0xeb, 0xfd, 0xaf, 0x25, 0x58, 0x29, 0x76,
	0xf9, 0x2c, 0x55, 0x62, 0x12, 0xfe, 0xa5, 0x0a, 0xc1, 0x73, 0x26, 0x38, 0xdb, 0x4f, 0x50, 0x92,
	0x07, 0xd0, 0x70, 0x29, 0xb6, 0x99, 0xb9, 0x55, 0xa4, 0x78, 0xc6, 0xaa, 0xbf, 0x67, 0x73, 0xed,
	0xc0, 0x64, 0x07, 0xda, 0x31, 0x4a, 0xc5, 0x53, 0x56, 0xaa, 0xb0, 0xde, 0x1c, 0xdb, 0x9d, 0x29,
	0x92, 0x96, 0xcd, 0xc8, 0x43, 0x68, 0x0a, 0xfc, 0xcd, 0x18, 0xa5, 0x72, 0xe4, 0xe9, 0xce, 0xd9,
	0x81, 0x5a, 0x14, 0xf5, 0x70, 0xf2, 0x63, 0xc3, 0x8d, 0x3c, 0x4b, 0x25, 0x3a, 0x26, 0xbd, 0x3b,
	0xd7, 0xd4, 0xc2, 0x68, 0x61, 0xa0, 0x8d, 0x79, 0xaa, 0xf4, 0x6b, 0x9a, 0x38, 0x62, 0xcd, 0x33,
	0x1e, 0x38, 0x18, 0x2d, 0x0c, 0xc2, 0xaf, 0x2a, 0xd0, 0xb0, 0xc9, 0xd0, 0x97, 0xcc, 0x73, 0x93,
	0xb7, 0x25, 0x5a, 0xe5, 0x39, 0x59, 0x85, 0x1a, 0xcb, 0x73, 0x77, 0x05, 0xfa, 0x2f, 0x79, 0x07,
	0x82, 0x5c, 0xf0, 0x34, 0xe2, 0x39, 0x4b, 0x4c, 0x88, 0x01, 0x9d, 0x0a, 0x08, 0x71, 0x15, 0x56,
	0x37, 0x0a, 0x5b, 0x4f, 0x21, 0xb4, 0x4e, 0x32, 0xf1, 0x65, 0x92, 0xb1, 0xd8, 0xf8, 0x16, 0xd0,
	0x62, 0xad, 0x77, 0x9b, 0x96, 0x71, 0xc3, 0xee, 0x36, 0xad, 0xd7, 0xeb, 0xb0, 0x98, 0x9d, 0xa4,
	0x28, 0x3a, 0x4d, 0x4b, 0x31, 0xb3, 0x08, 0xbf, 0xa9, 0x40, 0xbb, 0x94, 0xff, 0xef, 0xe0, 0xf3,
	0x3a, 0xb4, 0x25, 0x8a, 0x63, 0x1e, 0xe1, 0x51, 0xe6, 0x2e, 0x26, 0xa0, 0x65, 0xd1, 0x8c, 0x8f,
	0xf5, 0x33, 0x3e, 0xfa, 0x98, 0x16, 0x4b, 0x31, 0xfd, 0x0f, 0x7e, 0xcf, 0x66, 0xae, 0x75, 0x26,
	0x73, 0xe1, 0x9f, 0x6b, 0xd0, 0x74, 0x9c, 0x20, 0xb7, 0x00, 0x58, 0xce, 0x87, 0x51, 0xc2, 0xf8,
	0x48, 0xba, 0x92, 0x0b, 0x58, 0xce, 0xb7, 0x8d, 0x80, 0xbc, 0x0d, 0x4d, 0xad, 0xf6, 0xdd, 0x32,
	0xa0, 0x0d, 0x96, 0x73, 0x3d, 0x04, 0x84, 0xd0, 0x32, 0x5d, 0x3a, 0xca, 0xfc, 0xd5, 0x14, 0x6b,
	0x5d, 0x68, 0xa5, 0x36, 0x15, 0x14, 0x2d, 0x69, 0x15, 0x6a, 0x63, 0x91, 0xb8, 0xe0, 0xf4, 0x5f,
	0x72, 0x03, 0x5a, 0x63, 0x91, 0x0c, 0x73, 0xa6, 0x8e, 0x5c, 0x68, 0xcd, 0xb1, 0x48, 0x76, 0x99,
	0x3a, 0x22, 0xb7, 0x61, 0xc9, 0xd1, 0x75, 0x28, 0xf9, 0x4b, 0x34, 0xf1, 0xd5, 0x68, 0xdb, 0xc9,
	0xf6, 0xf8, 0x4b, 0xd4, 0xbe, 0x7b, 0x08, 0x8f, 0x4d, 0x98, 0x35, 0x1a, 0x38, 0xc9, 0x20, 0x26,
	0x77, 0xe0, 0x4a, 0x94, 0x70, 0x4c, 0xd5, 0x50, 0x09, 0x16, 0xa1, 0xc6, 0x04, 0xe6, 0x8c, 0x65,
	0x2b, 0x7e, 0xa6, 0xa5, 0x03, 0x43, 0x0c, 0x3d, 0x96, 0x6e, 0x1d, 0x62, 0xaa, 0x3a, 0x60, 0x33,
	0x50, 0x08, 0xc8, 0x07, 0xb0, 0x22, 0x30, 0x42, 0x7e, 0x8c, 0xf1, 0x70, 0x7f, 0xa2, 0x50, 0x76,
	0xda, 0xe6, 0xa0, 0x65, 0x2f, 0xfd, 0x54, 0x0b, 0x75, 0x13, 0x11, 0x78, 0x80, 0x02, 0x45, 0x67,
	0xc9, 0x06, 0xe2, 0x96, 0x7a, 0x83, 0x23, 0xa5, 0xf2, 0xa1, 0x9b, 0xbb, 0xd5, 0xa4, 0xb3, 0x6c,
	0xbd, 0xd0, 0xd2, 0x2d, 0x2f, 0xd4, 0xde, 0xbe, 0x18, 0x1e, 0x64, 0xe2, 0x84, 0x89, 0x18, 0x63,
	0xfd, 0xaf, 0xb3, 0x62, 0x71, 0x2f, 0x1e, 0x79, 0xe9, 0xa3, 0x4c, 0x84, 0x7f, 0xaa, 0x9a, 0xa9,
	0xce, 0xd6, 0xe2, 0x7b, 0xb0, 0xec, 0xeb, 0x72, 0x58, 0x7c, 0xa3, 0xd4, 0xe8, 0x92, 0x17, 0xea,
	0x6f, 0x94, 0x19, 0x90, 0x49, 0x65, 0x75, 0x16, 0x64, 0x72, 0x79, 0x1f, 0x9a, 0x09, 0x53, 0x98,
	0x46, 0x13, 0xd7, 0x4c, 0x2e, 0xf8, 0x36, 0xf1, 0x48, 0x32, 0x00, 0x52, 0xec, 0xfc, 0x26, 0x8f,
	0xf9, 0x55, 0x6f, 0x55, 0x88, 0xf4, 0x5d, 0x4a, 0x7d, 0x55, 0x36, 0xc5, 0x8b, 0xf6, 0x2e, 0xb5,
	0xc4, 0xa6, 0xb7, 0x0b, 0x70, 0x28, 0xf2, 0xc8, 0x3e, 0x38, 0x8e, 0x2a, 0x25, 0x89, 0x2e, 0x3b,
	0xbd, 0x7a, 0xe2, 0xfa, 0xb8, 0x2d, 0x86, 0xb2, 0x28, 0xfc, 0x7d, 0x05, 0x5a, 0xbe, 0x21, 0x91,
	0x9f, 0x40, 0x18, 0x65, 0x69, 0x8a, 0xe6, 0x81, 0x1f, 0x4a, 0x8c, 0xc6, 0xfa, 0x0e, 0x86, 0x79,
	0x96, 0xf0, 0x68, 0xe2, 0xaa, 0xa0, 0x33, 0x45, 0xec, 0x39, 0xc0, 0xae, 0xd1, 0x93, 0x4d, 0x58,
	0x73, 0x2c, 0xc3, 0x78, 0xa8, 0x4b, 0x1b, 0xc5, 0xb0, 0x78, 0xec, 0x03, 0x7a, 0xad, 0x50, 0xee,
	0x19, 0xdd, 0x53, 0xd7, 0x99, 0x04, 0xe6, 0x99, 0x50, 0x28, 0x7c, 0xbd, 0xf8, 0x75, 0xef, 0x8f,
	0x55, 0xb8, 0x71, 0xe6, 0xc9, 0x2a, 0x3d, 0x86, 0x21, 0xb4, 0x24, 0x1e, 0xa3, 0x61, 0x8e, 0x9b,
	0xb6, 0xfd, 0x7a, 0x76, 0x88, 0xaa, 0xbe, 0xc1, 0x10, 0x45, 0x7e, 0x0a, 0xc1, 0xb1, 0x7f, 0xc6,
	0xdc, 0x8d, 0xaf, 0xcf, 0x69, 0xe3, 0xc5, 0x73, 0x47, 0xa7, 0x26, 0xe4, 0x47, 0xb0, 0x36, 0xca,
	0x52, 0xae, 0x32, 0x81, 0xb1, 0x9f, 0x25, 0x9e, 0x4d, 0x72, 0xdf, 0x8e, 0xcf, 0x57, 0x92, 0x4f,
	0xe0, 0xe6, 0xb7, 0x14, 0x3b, 0x7c, 0x84, 0xa9, 0x1e, 0x6f, 0xa4, 0xeb, 0x0c, 0x17, 0x41, 0x3e,
	0xa2, 0x50, 0x37, 0xa4, 0x06, 0x68, 0xe8, 0xdf, 0x5f, 0x3e, 0x5e, 0x5d, 0x20, 0x57, 0x61, 0x59,
	0xff, 0x7f, 0x94, 0x89, 0x7d, 0x1e, 0xc7, 0x98, 0xae, 0x56, 0xc8, 0x75, 0x58, 0xd5, 0xa2, 0xcf,
	0x53, 0xff, 0xb5, 0x8b, 0xf1, 0x6a, 0x95, 0xac, 0xc1, 0x55, 0x2d, 0xfd, 0xd5, 0x38, 0x53, 0xec,
	0xb3, 0x17, 0x11, 0x62, 0x8c, 0xf1, 0x6a, 0x6d, 0xf3, 0x6f, 0x55, 0x80, 0xed, 0x2c, 0x55, 0x22,
	0x4b, 0x12, 0x14, 0xe4, 0xe7, 0xb0, 0x54, 0x9e, 0xe4, 0x49, 0xf1, 0xac, 0x9e, 0xff, 0x5d, 0x13,
	0x86, 0xe7, 0xe9, 0xdd, 0xcc, 0xb1, 0x07, 0x57, 0xce, 0xcc, 0x54, 0xe4, 0xf6, 0xa5, 0x93, 0x74,
	0x78, 0x6b, 0x0e, 0xc4, 0x6d, 0xfa, 0x04, 0x96, 0x67, 0x06, 0x1f, 0x52, 0x3c, 0xc0, 0x73, 0x06,
	0xaa, 0xf0, 0xe6, 0xb9, 0x80, 0xa9, 0x8f, 0x67, 0xd8, 0x37, 0xf5, 0x71, 0x2e, 0x2d, 0xa7, 0x3e,
	0x9e, 0x3b, 0x6c, 0x7d, 0x7a, 0xf7, 0xeb, 0x57, 0xdd, 0x85, 0xbf, 0xbf, 0xea, 0x2e, 0xbc, 0x7e,
	0xd5, 0xad, 0xfc, 0xf6, 0xb4, 0x5b, 0xf9, 0xc3, 0x69, 0xb7, 0xf2, 0xd7, 0xd3, 0x6e, 0xe5, 0xeb,
	0xd3, 0x6e, 0xe5, 0x1f, 0xa7, 0xdd, 0xca, 0xbf, 0x4f, 0xbb, 0x0b, 0xaf, 0x4f, 0xbb, 0x95, 0xdf,
	0xfd, 0xb3, 0xbb, 0xb0, 0xdf, 0x30, 0x64, 0xbd, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0x62, 0x89, 0x80, 0xe8, 0x11, 0x00, 0x00,
}
