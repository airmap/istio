// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/airmap/access/access.proto

/*
	Package access is a generated protocol buffer package.

	It is generated from these files:
		mixer/adapter/airmap/access/access.proto

	It has these top-level messages:
		Status
		Validity
		API
		AuthorizeAccessParameters
		AuthorizeAccessResult
*/
package access

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import google_protobuf1 "github.com/gogo/protobuf/types"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Code enumerates all known result codes.
type Code int32

const (
	// Not an error; returned on success
	//
	// HTTP Mapping: 200 OK
	CodeOK Code = 0
	// The operation is forbidden.
	//
	// HTTP Mapping: 403 Forbidden
	CodeForbidden Code = 1
	// The operation is not authorized.
	//
	// HTTP Mapping: 401 Unauthorized
	CodeUnauthorized Code = 2
	// The quota for the operation has been exceeded.
	//
	// HTTP Mapping: 429 Too Many Requests
	CodeQuotaExceeded Code = 3
)

var Code_name = map[int32]string{
	0: "CodeOK",
	1: "CodeForbidden",
	2: "CodeUnauthorized",
	3: "CodeQuotaExceeded",
}
var Code_value = map[string]int32{
	"CodeOK":            0,
	"CodeForbidden":     1,
	"CodeUnauthorized":  2,
	"CodeQuotaExceeded": 3,
}

func (Code) EnumDescriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

// Status summarizes the status of an operation.
type Status struct {
	Code    Code   `protobuf:"varint,1,opt,name=code,proto3,enum=access.Code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{0} }

func (m *Status) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return CodeOK
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Validity describes limits on the validity of a result.
type Validity struct {
	Duration *google_protobuf.Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	Count    uint64                    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Validity) Reset()                    { *m = Validity{} }
func (*Validity) ProtoMessage()               {}
func (*Validity) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{1} }

func (m *Validity) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Validity) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// API groups up types describing API accesses.
type API struct {
}

func (m *API) Reset()                    { *m = API{} }
func (*API) ProtoMessage()               {}
func (*API) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2} }

// Namespace models the namespace that an API lives in.
type API_Namespace struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Namespace) Reset()                    { *m = API_Namespace{} }
func (*API_Namespace) ProtoMessage()               {}
func (*API_Namespace) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 0} }

func (m *API_Namespace) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Name models the name of an API.
type API_Name struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Name) Reset()                    { *m = API_Name{} }
func (*API_Name) ProtoMessage()               {}
func (*API_Name) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 1} }

func (m *API_Name) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Version models the version of an API.
type API_Version struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Version) Reset()                    { *m = API_Version{} }
func (*API_Version) ProtoMessage()               {}
func (*API_Version) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 2} }

func (m *API_Version) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Resource models a specific resource of an API.
type API_Resource struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Resource) Reset()                    { *m = API_Resource{} }
func (*API_Resource) ProtoMessage()               {}
func (*API_Resource) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 3} }

func (m *API_Resource) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Method models an access method on an API.
type API_Method struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Method) Reset()                    { *m = API_Method{} }
func (*API_Method) ProtoMessage()               {}
func (*API_Method) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 4} }

func (m *API_Method) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// Key models an API key passed on with a request to an API.
type API_Key struct {
	AsString string `protobuf:"bytes,1,opt,name=as_string,json=asString,proto3" json:"as_string,omitempty"`
}

func (m *API_Key) Reset()                    { *m = API_Key{} }
func (*API_Key) ProtoMessage()               {}
func (*API_Key) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{2, 5} }

func (m *API_Key) GetAsString() string {
	if m != nil {
		return m.AsString
	}
	return ""
}

// AuthorizeAccessParameters bundles up parameters for calls to Controller.AuthorizeAccess.
type AuthorizeAccessParameters struct {
	Subject   *AuthorizeAccessParameters_Subject `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Action    *AuthorizeAccessParameters_Action  `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Timestamp *google_protobuf1.Timestamp        `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *AuthorizeAccessParameters) Reset()                    { *m = AuthorizeAccessParameters{} }
func (*AuthorizeAccessParameters) ProtoMessage()               {}
func (*AuthorizeAccessParameters) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{3} }

func (m *AuthorizeAccessParameters) GetSubject() *AuthorizeAccessParameters_Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *AuthorizeAccessParameters) GetAction() *AuthorizeAccessParameters_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *AuthorizeAccessParameters) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Subject describes who is trying to access an API.
type AuthorizeAccessParameters_Subject struct {
	User   string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Groups string   `protobuf:"bytes,2,opt,name=groups,proto3" json:"groups,omitempty"`
	Key    *API_Key `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *AuthorizeAccessParameters_Subject) Reset()      { *m = AuthorizeAccessParameters_Subject{} }
func (*AuthorizeAccessParameters_Subject) ProtoMessage() {}
func (*AuthorizeAccessParameters_Subject) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{3, 0}
}

func (m *AuthorizeAccessParameters_Subject) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *AuthorizeAccessParameters_Subject) GetGroups() string {
	if m != nil {
		return m.Groups
	}
	return ""
}

func (m *AuthorizeAccessParameters_Subject) GetKey() *API_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

// Action describes what a subject is trying to access.
type AuthorizeAccessParameters_Action struct {
	Namespace *API_Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name      *API_Name      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Version   *API_Version   `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Method    *API_Method    `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Resource  *API_Resource  `protobuf:"bytes,5,opt,name=resource" json:"resource,omitempty"`
}

func (m *AuthorizeAccessParameters_Action) Reset()      { *m = AuthorizeAccessParameters_Action{} }
func (*AuthorizeAccessParameters_Action) ProtoMessage() {}
func (*AuthorizeAccessParameters_Action) Descriptor() ([]byte, []int) {
	return fileDescriptorAccess, []int{3, 1}
}

func (m *AuthorizeAccessParameters_Action) GetNamespace() *API_Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetName() *API_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetVersion() *API_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetMethod() *API_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *AuthorizeAccessParameters_Action) GetResource() *API_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

// AuthorizeAccessResult bundles up the result of calls to Controller.AuthorizeAccess.
type AuthorizeAccessResult struct {
	Status   *Status   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Validity *Validity `protobuf:"bytes,2,opt,name=validity" json:"validity,omitempty"`
}

func (m *AuthorizeAccessResult) Reset()                    { *m = AuthorizeAccessResult{} }
func (*AuthorizeAccessResult) ProtoMessage()               {}
func (*AuthorizeAccessResult) Descriptor() ([]byte, []int) { return fileDescriptorAccess, []int{4} }

func (m *AuthorizeAccessResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AuthorizeAccessResult) GetValidity() *Validity {
	if m != nil {
		return m.Validity
	}
	return nil
}

func init() {
	proto.RegisterType((*Status)(nil), "access.Status")
	proto.RegisterType((*Validity)(nil), "access.Validity")
	proto.RegisterType((*API)(nil), "access.API")
	proto.RegisterType((*API_Namespace)(nil), "access.API.Namespace")
	proto.RegisterType((*API_Name)(nil), "access.API.Name")
	proto.RegisterType((*API_Version)(nil), "access.API.Version")
	proto.RegisterType((*API_Resource)(nil), "access.API.Resource")
	proto.RegisterType((*API_Method)(nil), "access.API.Method")
	proto.RegisterType((*API_Key)(nil), "access.API.Key")
	proto.RegisterType((*AuthorizeAccessParameters)(nil), "access.AuthorizeAccessParameters")
	proto.RegisterType((*AuthorizeAccessParameters_Subject)(nil), "access.AuthorizeAccessParameters.Subject")
	proto.RegisterType((*AuthorizeAccessParameters_Action)(nil), "access.AuthorizeAccessParameters.Action")
	proto.RegisterType((*AuthorizeAccessResult)(nil), "access.AuthorizeAccessResult")
	proto.RegisterEnum("access.Code", Code_name, Code_value)
}
func (x Code) String() string {
	s, ok := Code_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Validity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Validity)
	if !ok {
		that2, ok := that.(Validity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *API) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API)
	if !ok {
		that2, ok := that.(API)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *API_Namespace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Namespace)
	if !ok {
		that2, ok := that.(API_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Name) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Name)
	if !ok {
		that2, ok := that.(API_Name)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Version) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Version)
	if !ok {
		that2, ok := that.(API_Version)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Resource) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Resource)
	if !ok {
		that2, ok := that.(API_Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Method) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Method)
	if !ok {
		that2, ok := that.(API_Method)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *API_Key) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*API_Key)
	if !ok {
		that2, ok := that.(API_Key)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.AsString != that1.AsString {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthorizeAccessParameters)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Subject.Equal(that1.Subject) {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters_Subject) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthorizeAccessParameters_Subject)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters_Subject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Groups != that1.Groups {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *AuthorizeAccessParameters_Action) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthorizeAccessParameters_Action)
	if !ok {
		that2, ok := that.(AuthorizeAccessParameters_Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.Method.Equal(that1.Method) {
		return false
	}
	if !this.Resource.Equal(that1.Resource) {
		return false
	}
	return true
}
func (this *AuthorizeAccessResult) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthorizeAccessResult)
	if !ok {
		that2, ok := that.(AuthorizeAccessResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Validity.Equal(that1.Validity) {
		return false
	}
	return true
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.Status{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Validity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.Validity{")
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&access.API{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Namespace{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Name) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Name{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Version) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Version{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Resource{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Method) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Method{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *API_Key) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&access.API_Key{")
	s = append(s, "AsString: "+fmt.Sprintf("%#v", this.AsString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access.AuthorizeAccessParameters{")
	if this.Subject != nil {
		s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters_Subject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&access.AuthorizeAccessParameters_Subject{")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	if this.Key != nil {
		s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessParameters_Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&access.AuthorizeAccessParameters_Action{")
	if this.Namespace != nil {
		s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	}
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Version != nil {
		s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	}
	if this.Method != nil {
		s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	}
	if this.Resource != nil {
		s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeAccessResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&access.AuthorizeAccessResult{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Validity != nil {
		s = append(s, "Validity: "+fmt.Sprintf("%#v", this.Validity)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAccess(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// AuthorizeAccess authorizes API accesses.
	AuthorizeAccess(ctx context.Context, in *AuthorizeAccessParameters, opts ...grpc.CallOption) (*AuthorizeAccessResult, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) AuthorizeAccess(ctx context.Context, in *AuthorizeAccessParameters, opts ...grpc.CallOption) (*AuthorizeAccessResult, error) {
	out := new(AuthorizeAccessResult)
	err := grpc.Invoke(ctx, "/access.Controller/AuthorizeAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// AuthorizeAccess authorizes API accesses.
	AuthorizeAccess(context.Context, *AuthorizeAccessParameters) (*AuthorizeAccessResult, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_AuthorizeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAccessParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AuthorizeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.Controller/AuthorizeAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AuthorizeAccess(ctx, req.(*AuthorizeAccessParameters))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizeAccess",
			Handler:    _Controller_AuthorizeAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mixer/adapter/airmap/access/access.proto",
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Validity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Duration.Size()))
		n1, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *API) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *API_Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Namespace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Name) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Version) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Method) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Method) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *API_Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API_Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AsString) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.AsString)))
		i += copy(dAtA[i:], m.AsString)
	}
	return i, nil
}

func (m *AuthorizeAccessParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subject != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Subject.Size()))
		n2, err := m.Subject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Action != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Action.Size()))
		n3, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Timestamp.Size()))
		n4, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AuthorizeAccessParameters_Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters_Subject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Groups) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(len(m.Groups)))
		i += copy(dAtA[i:], m.Groups)
	}
	if m.Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Key.Size()))
		n5, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AuthorizeAccessParameters_Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessParameters_Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Namespace != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Namespace.Size()))
		n6, err := m.Namespace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Name != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Name.Size()))
		n7, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Version != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Version.Size()))
		n8, err := m.Version.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Method != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Method.Size()))
		n9, err := m.Method.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Resource != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Resource.Size()))
		n10, err := m.Resource.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *AuthorizeAccessResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeAccessResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Validity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccess(dAtA, i, uint64(m.Validity.Size()))
		n12, err := m.Validity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func encodeVarintAccess(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAccess(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *Validity) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovAccess(uint64(m.Count))
	}
	return n
}

func (m *API) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *API_Namespace) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Name) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Version) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Resource) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Method) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *API_Key) Size() (n int) {
	var l int
	_ = l
	l = len(m.AsString)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters) Size() (n int) {
	var l int
	_ = l
	if m.Subject != nil {
		l = m.Subject.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters_Subject) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	l = len(m.Groups)
	if l > 0 {
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessParameters_Action) Size() (n int) {
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Method != nil {
		l = m.Method.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func (m *AuthorizeAccessResult) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	if m.Validity != nil {
		l = m.Validity.Size()
		n += 1 + l + sovAccess(uint64(l))
	}
	return n
}

func sovAccess(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccess(x uint64) (n int) {
	return sovAccess(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Validity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Validity{`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "google_protobuf.Duration", 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API{`,
		`}`,
	}, "")
	return s
}
func (this *API_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Namespace{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Name) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Name{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Version) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Version{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Resource{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Method) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Method{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *API_Key) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API_Key{`,
		`AsString:` + fmt.Sprintf("%v", this.AsString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters{`,
		`Subject:` + strings.Replace(fmt.Sprintf("%v", this.Subject), "AuthorizeAccessParameters_Subject", "AuthorizeAccessParameters_Subject", 1) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "AuthorizeAccessParameters_Action", "AuthorizeAccessParameters_Action", 1) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters_Subject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters_Subject{`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "API_Key", "API_Key", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessParameters_Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessParameters_Action{`,
		`Namespace:` + strings.Replace(fmt.Sprintf("%v", this.Namespace), "API_Namespace", "API_Namespace", 1) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "API_Name", "API_Name", 1) + `,`,
		`Version:` + strings.Replace(fmt.Sprintf("%v", this.Version), "API_Version", "API_Version", 1) + `,`,
		`Method:` + strings.Replace(fmt.Sprintf("%v", this.Method), "API_Method", "API_Method", 1) + `,`,
		`Resource:` + strings.Replace(fmt.Sprintf("%v", this.Resource), "API_Resource", "API_Resource", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeAccessResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeAccessResult{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`Validity:` + strings.Replace(fmt.Sprintf("%v", this.Validity), "Validity", "Validity", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAccess(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: API: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: API: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Method) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Method: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Method: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *API_Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAccessParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAccessParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subject == nil {
				m.Subject = &AuthorizeAccessParameters_Subject{}
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &AuthorizeAccessParameters_Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf1.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters_Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &API_Key{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessParameters_Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &API_Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &API_Name{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &API_Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Method == nil {
				m.Method = &API_Method{}
			}
			if err := m.Method.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &API_Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeAccessResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeAccessResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeAccessResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccess
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validity == nil {
				m.Validity = &Validity{}
			}
			if err := m.Validity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccess(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccess
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccess(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccess
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccess
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAccess
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccess
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccess(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccess = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccess   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/adapter/airmap/access/access.proto", fileDescriptorAccess) }

var fileDescriptorAccess = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0x9b, 0x35, 0x4b, 0xdb, 0xe7, 0xf7, 0x63, 0xeb, 0xcc, 0x86, 0xba, 0x20, 0xc2, 0x56,
	0x60, 0x94, 0x69, 0xa4, 0x68, 0x13, 0x12, 0x47, 0xca, 0x06, 0xd2, 0x34, 0x01, 0xc3, 0x85, 0xc1,
	0x0d, 0xb9, 0x89, 0xe9, 0x02, 0x4d, 0x5c, 0xd9, 0xce, 0xb4, 0x72, 0xe2, 0x25, 0xf0, 0x32, 0xe0,
	0x9d, 0x70, 0xdc, 0x91, 0x23, 0x0b, 0x17, 0x8e, 0x7d, 0x09, 0x28, 0x8e, 0xd3, 0x55, 0x45, 0x6b,
	0x4f, 0xce, 0x63, 0x7f, 0x9e, 0x3f, 0x7e, 0x9e, 0xaf, 0x03, 0x8d, 0x30, 0x38, 0xa5, 0xbc, 0x49,
	0x7c, 0xd2, 0x97, 0xe9, 0x1a, 0xf0, 0x90, 0xf4, 0x9b, 0xc4, 0xf3, 0xa8, 0x10, 0x7a, 0x71, 0xfb,
	0x9c, 0x49, 0x86, 0xac, 0xcc, 0xb2, 0x9d, 0x2e, 0x63, 0xdd, 0x1e, 0x6d, 0xaa, 0xdd, 0x4e, 0xfc,
	0xa1, 0xe9, 0xc7, 0x9c, 0xc8, 0x80, 0x45, 0x19, 0x67, 0xdf, 0x9c, 0x3c, 0x97, 0x41, 0x48, 0x85,
	0x24, 0x61, 0x3f, 0x03, 0xea, 0x7b, 0x60, 0xb5, 0x25, 0x91, 0xb1, 0x40, 0x6b, 0x60, 0x7a, 0xcc,
	0xa7, 0x35, 0x63, 0xcd, 0x68, 0x2c, 0x6c, 0xff, 0xef, 0xea, 0x7c, 0xbb, 0xcc, 0xa7, 0x58, 0x9d,
	0xa0, 0x1a, 0x94, 0x42, 0x2a, 0x04, 0xe9, 0xd2, 0xda, 0xdc, 0x9a, 0xd1, 0xa8, 0xe0, 0xdc, 0xac,
	0xbf, 0x85, 0xf2, 0x11, 0xe9, 0x05, 0x7e, 0x20, 0x07, 0xe8, 0x21, 0x94, 0xf3, 0x22, 0x54, 0xac,
	0xff, 0xb6, 0x57, 0xdd, 0xac, 0x0a, 0x37, 0xaf, 0xc2, 0xdd, 0xd3, 0x00, 0x1e, 0xa1, 0x68, 0x19,
	0xe6, 0x3d, 0x16, 0x47, 0x52, 0x85, 0x36, 0x71, 0x66, 0xd4, 0x87, 0x06, 0x14, 0x5b, 0x87, 0xfb,
	0x76, 0x03, 0x2a, 0x2f, 0x48, 0x48, 0x45, 0x9f, 0x78, 0x14, 0x5d, 0x87, 0x0a, 0x11, 0xef, 0x85,
	0xe4, 0x41, 0xd4, 0x55, 0x29, 0x2a, 0xb8, 0x4c, 0x44, 0x5b, 0xd9, 0xf6, 0x2d, 0x30, 0x53, 0x72,
	0x3a, 0xb4, 0x01, 0xa5, 0x23, 0xca, 0x45, 0x9a, 0x77, 0x2a, 0x77, 0x17, 0xca, 0x98, 0x0a, 0x16,
	0xf3, 0x59, 0x59, 0xef, 0x80, 0xf5, 0x9c, 0xca, 0x63, 0xe6, 0x4f, 0xc7, 0xea, 0x50, 0x3c, 0xa0,
	0x83, 0xa9, 0x4c, 0xfd, 0xbb, 0x09, 0xab, 0xad, 0x58, 0x1e, 0x33, 0x1e, 0x7c, 0xa6, 0x2d, 0x35,
	0x84, 0x43, 0xc2, 0x49, 0x48, 0x25, 0xe5, 0x02, 0xed, 0x42, 0x49, 0xc4, 0x9d, 0x8f, 0xd4, 0x93,
	0xba, 0xb9, 0xf7, 0xf2, 0x41, 0x5d, 0xea, 0xe3, 0xb6, 0x33, 0x07, 0x9c, 0x7b, 0xa2, 0xc7, 0x60,
	0x11, 0x4f, 0x0d, 0x68, 0x4e, 0xc5, 0x68, 0xcc, 0x8e, 0xd1, 0x52, 0x3c, 0xd6, 0x7e, 0xe8, 0x11,
	0x54, 0x46, 0x4a, 0xaa, 0x15, 0x55, 0x10, 0xfb, 0x9f, 0x29, 0xbf, 0xce, 0x09, 0x7c, 0x01, 0xdb,
	0xef, 0xa0, 0xa4, 0xeb, 0x41, 0x08, 0xcc, 0x58, 0x50, 0xae, 0x3b, 0xa0, 0xbe, 0xd1, 0x35, 0xb0,
	0xba, 0x9c, 0xc5, 0x7d, 0xa1, 0x25, 0xa6, 0x2d, 0xb4, 0x0e, 0xc5, 0x4f, 0x74, 0xa0, 0x53, 0x2d,
	0x8e, 0xea, 0x3d, 0xdc, 0x77, 0x0f, 0xe8, 0x00, 0xa7, 0x67, 0xf6, 0xd0, 0x00, 0x2b, 0x2b, 0x13,
	0xed, 0x40, 0x25, 0xca, 0xe5, 0xa2, 0xfb, 0xb4, 0x32, 0xee, 0x33, 0xd2, 0x12, 0xbe, 0xe0, 0xd0,
	0x6d, 0x30, 0x53, 0x43, 0xf7, 0xa4, 0x3a, 0xc9, 0x63, 0x75, 0x8a, 0xee, 0x43, 0xe9, 0x24, 0x93,
	0x8e, 0x2e, 0xe6, 0xea, 0x38, 0xa8, 0x55, 0x85, 0x73, 0x06, 0x6d, 0x82, 0x15, 0x2a, 0x61, 0xd4,
	0x4c, 0x45, 0xa3, 0x71, 0x3a, 0x93, 0x0c, 0xd6, 0x04, 0x7a, 0x00, 0x65, 0xae, 0xd5, 0x56, 0x9b,
	0x57, 0xf4, 0xf2, 0x38, 0x9d, 0x2b, 0x11, 0x8f, 0xa8, 0x7a, 0x08, 0x2b, 0x13, 0x23, 0xc3, 0x54,
	0xc4, 0x3d, 0x89, 0x36, 0xc0, 0x12, 0xea, 0x59, 0xeb, 0xdb, 0x2f, 0xe4, 0x81, 0xb2, 0xc7, 0x8e,
	0xf5, 0x29, 0xda, 0x82, 0xf2, 0x89, 0x7e, 0xb8, 0x93, 0xf7, 0xce, 0x1f, 0x34, 0x1e, 0x11, 0x9b,
	0x18, 0xcc, 0xf4, 0x77, 0x80, 0x00, 0xac, 0x74, 0x7d, 0x79, 0x50, 0x2d, 0xa0, 0x25, 0xb8, 0x92,
	0x7e, 0x3f, 0x63, 0xbc, 0x13, 0xf8, 0x3e, 0x8d, 0xaa, 0x06, 0x5a, 0x86, 0x6a, 0xba, 0xf5, 0x26,
	0x22, 0x79, 0x6d, 0x7e, 0x75, 0x0e, 0xad, 0xc0, 0x52, 0xba, 0xfb, 0x2a, 0x66, 0x92, 0x3c, 0x3d,
	0xf5, 0x28, 0xf5, 0xa9, 0x5f, 0x2d, 0x6e, 0x13, 0x80, 0x5d, 0x16, 0x49, 0xce, 0x7a, 0x3d, 0xca,
	0x51, 0x1b, 0x16, 0x27, 0x2e, 0x84, 0xd6, 0x67, 0x8a, 0xd3, 0xbe, 0x71, 0x09, 0x92, 0x35, 0xe3,
	0xc9, 0xd6, 0xd9, 0xb9, 0x53, 0xf8, 0x79, 0xee, 0x14, 0x86, 0xe7, 0x8e, 0xf1, 0x25, 0x71, 0x8c,
	0x6f, 0x89, 0x63, 0xfc, 0x48, 0x1c, 0xe3, 0x2c, 0x71, 0x8c, 0x5f, 0x89, 0x63, 0xfc, 0x49, 0x9c,
	0xc2, 0x30, 0x71, 0x8c, 0xaf, 0xbf, 0x9d, 0x42, 0xc7, 0x52, 0xfa, 0xdd, 0xf9, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x12, 0x2d, 0x85, 0x47, 0x8d, 0x05, 0x00, 0x00,
}
