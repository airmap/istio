// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/adapter/airmap/config/config.proto

/*
	Package config is a generated protocol buffer package.

	The `airmap` adapter is designed to bridge over to an in-cluster adapter instance via ReST.

	It is generated from these files:
		mixer/adapter/airmap/config/config.proto

	It has these top-level messages:
		Params
*/
package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration format for the AirMap adapter.
type Params struct {
	Endpoint      string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AmqpUsername  string `protobuf:"bytes,2,opt,name=amqp_username,json=amqpUsername,proto3" json:"amqp_username,omitempty"`
	AmqpPassword  string `protobuf:"bytes,3,opt,name=amqp_password,json=amqpPassword,proto3" json:"amqp_password,omitempty"`
	AmqpHost      string `protobuf:"bytes,4,opt,name=amqp_host,json=amqpHost,proto3" json:"amqp_host,omitempty"`
	AmqpPort      int32  `protobuf:"varint,5,opt,name=amqp_port,json=amqpPort,proto3" json:"amqp_port,omitempty"`
	AmqpQueuename string `protobuf:"bytes,6,opt,name=amqp_queuename,json=amqpQueuename,proto3" json:"amqp_queuename,omitempty"`
}

func (m *Params) Reset()                    { *m = Params{} }
func (*Params) ProtoMessage()               {}
func (*Params) Descriptor() ([]byte, []int) { return fileDescriptorConfig, []int{0} }

func (m *Params) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Params) GetAmqpUsername() string {
	if m != nil {
		return m.AmqpUsername
	}
	return ""
}

func (m *Params) GetAmqpPassword() string {
	if m != nil {
		return m.AmqpPassword
	}
	return ""
}

func (m *Params) GetAmqpHost() string {
	if m != nil {
		return m.AmqpHost
	}
	return ""
}

func (m *Params) GetAmqpPort() int32 {
	if m != nil {
		return m.AmqpPort
	}
	return 0
}

func (m *Params) GetAmqpQueuename() string {
	if m != nil {
		return m.AmqpQueuename
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "adapter.airmap.config.Params")
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.AmqpUsername != that1.AmqpUsername {
		return false
	}
	if this.AmqpPassword != that1.AmqpPassword {
		return false
	}
	if this.AmqpHost != that1.AmqpHost {
		return false
	}
	if this.AmqpPort != that1.AmqpPort {
		return false
	}
	if this.AmqpQueuename != that1.AmqpQueuename {
		return false
	}
	return true
}
func (this *Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&config.Params{")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "AmqpUsername: "+fmt.Sprintf("%#v", this.AmqpUsername)+",\n")
	s = append(s, "AmqpPassword: "+fmt.Sprintf("%#v", this.AmqpPassword)+",\n")
	s = append(s, "AmqpHost: "+fmt.Sprintf("%#v", this.AmqpHost)+",\n")
	s = append(s, "AmqpPort: "+fmt.Sprintf("%#v", this.AmqpPort)+",\n")
	s = append(s, "AmqpQueuename: "+fmt.Sprintf("%#v", this.AmqpQueuename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.AmqpUsername) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AmqpUsername)))
		i += copy(dAtA[i:], m.AmqpUsername)
	}
	if len(m.AmqpPassword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AmqpPassword)))
		i += copy(dAtA[i:], m.AmqpPassword)
	}
	if len(m.AmqpHost) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AmqpHost)))
		i += copy(dAtA[i:], m.AmqpHost)
	}
	if m.AmqpPort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.AmqpPort))
	}
	if len(m.AmqpQueuename) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AmqpQueuename)))
		i += copy(dAtA[i:], m.AmqpQueuename)
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Params) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.AmqpUsername)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.AmqpPassword)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.AmqpHost)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.AmqpPort != 0 {
		n += 1 + sovConfig(uint64(m.AmqpPort))
	}
	l = len(m.AmqpQueuename)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Params{`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`AmqpUsername:` + fmt.Sprintf("%v", this.AmqpUsername) + `,`,
		`AmqpPassword:` + fmt.Sprintf("%v", this.AmqpPassword) + `,`,
		`AmqpHost:` + fmt.Sprintf("%v", this.AmqpHost) + `,`,
		`AmqpPort:` + fmt.Sprintf("%v", this.AmqpPort) + `,`,
		`AmqpQueuename:` + fmt.Sprintf("%v", this.AmqpQueuename) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpPort", wireType)
			}
			m.AmqpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmqpPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmqpQueuename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmqpQueuename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/adapter/airmap/config/config.proto", fileDescriptorConfig) }

var fileDescriptorConfig = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4e, 0xc4, 0x30,
	0x10, 0x45, 0x33, 0xc0, 0x46, 0xac, 0x05, 0x14, 0x91, 0x90, 0x2c, 0x90, 0x46, 0x2b, 0x10, 0x52,
	0xaa, 0x6c, 0x01, 0x27, 0xa0, 0xa2, 0x0c, 0x48, 0x34, 0x34, 0xc8, 0x10, 0x03, 0x29, 0x9c, 0xf1,
	0xda, 0x8e, 0xa0, 0xe4, 0x08, 0x1c, 0x83, 0xa3, 0xd0, 0xb1, 0x25, 0x25, 0x31, 0x0d, 0xe5, 0x1e,
	0x01, 0xc5, 0x0e, 0xd9, 0x6a, 0xe4, 0xf7, 0x9f, 0x35, 0xa3, 0xcf, 0x72, 0x55, 0xbf, 0x48, 0x33,
	0x17, 0x95, 0xd0, 0xae, 0x9f, 0xb5, 0x51, 0x42, 0xcf, 0xef, 0xa9, 0x79, 0xa8, 0x1f, 0x87, 0x51,
	0x68, 0x43, 0x8e, 0xb2, 0xfd, 0xc1, 0x29, 0xa2, 0x53, 0xc4, 0xf0, 0xe8, 0x13, 0x58, 0x5a, 0x0a,
	0x23, 0x94, 0xcd, 0x0e, 0xd8, 0xb6, 0x6c, 0x2a, 0x4d, 0x75, 0xe3, 0x38, 0xcc, 0x20, 0x9f, 0x5e,
	0x8d, 0xef, 0xec, 0x98, 0xed, 0x0a, 0xb5, 0xd0, 0xb7, 0xad, 0x95, 0xa6, 0x11, 0x4a, 0xf2, 0x8d,
	0x20, 0xec, 0xf4, 0xf0, 0x7a, 0x60, 0xa3, 0xa4, 0x85, 0xb5, 0xcf, 0x64, 0x2a, 0xbe, 0xb9, 0x96,
	0xca, 0x81, 0x65, 0x87, 0x6c, 0x1a, 0xa4, 0x27, 0xb2, 0x8e, 0x6f, 0xc5, 0x35, 0x3d, 0xb8, 0x20,
	0xeb, 0xc6, 0x50, 0x93, 0x71, 0x7c, 0x32, 0x83, 0x7c, 0x12, 0xc3, 0x92, 0x8c, 0xcb, 0x4e, 0xd8,
	0x5e, 0x08, 0x17, 0xad, 0x6c, 0x65, 0x38, 0x22, 0x0d, 0xdf, 0xc3, 0xd2, 0xcb, 0x7f, 0x78, 0x7e,
	0xb6, 0xec, 0x30, 0xf9, 0xea, 0x30, 0x59, 0x75, 0x08, 0xaf, 0x1e, 0xe1, 0xdd, 0x23, 0x7c, 0x78,
	0x84, 0xa5, 0x47, 0xf8, 0xf6, 0x08, 0xbf, 0x1e, 0x93, 0x95, 0x47, 0x78, 0xfb, 0xc1, 0xe4, 0x26,
	0x8d, 0x3d, 0xdc, 0xa5, 0xa1, 0xa5, 0xd3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0xe5, 0x19,
	0x54, 0x51, 0x01, 0x00, 0x00,
}
